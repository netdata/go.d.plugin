plugin_name: go.d.plugin
modules:
  - &module
    meta: &meta
      module_name: prometheus
      plugin_name: go.d.plugin
      monitored_instance:
        name: Prometheus endpoint
        link: https://prometheus.io/
        icon_filename: prometheus.png
        categories:
          - data-collection.apm
      keywords:
        - prometheus
      related_resources:
        integrations:
          list: []
      info_provided_to_referring_integrations:
        description: ""
      most_popular: true
    overview: &overview
      data_collection:
        metrics_description: |
          This generic Prometheus collector gathers metrics from any [`Prometheus`](https://prometheus.io/) endpoints.
        method_description: |
          It collects metrics by periodically sending HTTP requests to the target instance and parsing the response.
      supported_platforms:
        include: []
        exclude: []
      multi-instance: true
      additional_permissions:
        description: ""
      default_behavior:
        auto_detection:
          description: |
            By default, it detects instances running on the local host by trying to connect to known ports that are [allocated to exporters](https://github.com/prometheus/prometheus/wiki/Default-port-allocations).
            The full list of endpoints is available in the collector's [configuration file](https://github.com/netdata/go.d.plugin/blob/master/config/go.d/prometheus.conf).
        limits:
          description: ""
        performance_impact:
          description: ""
    setup: &setup
      prerequisites:
        list: []
      configuration:
        file:
          name: go.d/prometheus.conf
        options:
          description: |
            The following options can be defined globally: update_every, autodetection_retry.
          folding:
            title: Config options
            enabled: true
          list:
            - name: update_every
              description: Data collection frequency.
              default_value: 10
              required: false
            - name: autodetection_retry
              description: Recheck interval in seconds. Zero means no recheck will be scheduled.
              default_value: 0
              required: false
            - name: url
              description: Server URL.
              default_value: ""
              required: true
            - name: selector
              description: Time series selector (filter).
              default_value: ""
              required: false
              detailed_description: |
                This option allows you to filter out unwanted time series. Only metrics matching the selector will be collected.

                - Logic: (pattern1 OR pattern2) AND !(pattern3 or pattern4)
                - Pattern syntax: [selector](https://github.com/netdata/go.d.plugin/pkg/prometheus/selector#time-series-selectors).
                - Option syntax:
                
                ```yaml
                selector:
                  allow:
                    - pattern1
                    - pattern2
                  deny:
                    - pattern3
                    - pattern4
                ```
            - name: fallback_type
              description: Time series selector (filter).
              default_value: ""
              required: false
              detailed_description: |
                This option allows you to process Untyped metrics as Counter or Gauge instead of ignoring them.

                - Metric name pattern syntax: [shell file name pattern](https://golang.org/pkg/path/filepath/#Match).
                - Option syntax:
                
                ```yaml
                fallback_type:
                  counter:
                    - metric_name_pattern1
                    - metric_name_pattern2
                  gauge:
                    - metric_name_pattern3
                    - metric_name_pattern4
                ```
            - name: max_time_series
              description: Global time series limit. If an endpoint returns number of time series > limit the data is not processed.
              default_value: 2000
              required: false
            - name: max_time_series_per_metric
              description: Time series per metric (metric name) limit. Metrics with number of time series > limit are skipped.
              default_value: 200
              required: false
            - name: timeout
              description: HTTP request timeout.
              default_value: 10
              required: false
            - name: username
              description: Username for basic HTTP authentication.
              default_value: ""
              required: false
            - name: password
              description: Password for basic HTTP authentication.
              default_value: ""
              required: false
            - name: proxy_url
              description: Proxy URL.
              default_value: ""
              required: false
            - name: proxy_username
              description: Username for proxy basic HTTP authentication.
              default_value: ""
              required: false
            - name: proxy_password
              description: Password for proxy basic HTTP authentication.
              default_value: ""
              required: false
            - name: method
              description: HTTP request method.
              default_value: "GET"
              required: false
            - name: body
              description: HTTP request body.
              default_value: ""
              required: false
            - name: headers
              description: HTTP request headers.
              default_value: ""
              required: false
            - name: not_follow_redirects
              description: Redirect handling policy. Controls whether the client follows redirects.
              default_value: no
              required: false
            - name: tls_skip_verify
              description: Server certificate chain and hostname validation policy. Controls whether the client performs this check.
              default_value: no
              required: false
            - name: tls_ca
              description: Certification authority that the client uses when verifying the server's certificates.
              default_value: ""
              required: false
            - name: tls_cert
              description: Client TLS certificate.
              default_value: ""
              required: false
            - name: tls_key
              description: Client TLS key.
              default_value: ""
              required: false
        examples:
          folding:
            title: Config
            enabled: true
          list:
            - name: Basic
              folding:
                enabled: false
              description: |
                > **Note**: Change the port of the monitored application on which it provides metrics.

                A basic example configuration.
              config: |
                jobs:
                  - name: local
                    url: http://127.0.0.1:9090/metrics
            - name: HTTP authentication
              description: |
                > **Note**: Change the port of the monitored application on which it provides metrics.

                Basic HTTP authentication.
              config: |
                jobs:
                  - name: local
                    url: http://127.0.0.1:9090/metrics
                    username: username
                    password: password
            - name: HTTPS with self-signed certificate
              description: |
                > **Note**: Change the port of the monitored application on which it provides metrics.

                 Do not validate server certificate chain and hostname.
              config: |
                jobs:
                  - name: local
                    url: https://127.0.0.1:9090/metrics
                    tls_skip_verify: yes
            - name: Multi-instance
              description: |
                > **Note**: When you define multiple jobs, their names must be unique.
                > **Note**: Change the port of the monitored application on which it provides metrics.
                
                Collecting metrics from local and remote instances.
              config: |
                jobs:
                  - name: local
                    url: http://127.0.0.1:9090/metrics
                
                  - name: remote
                    url: http://192.0.2.1:9090/metrics
    troubleshooting:
      problems:
        list: []
    alerts: []
    metrics:
      folding:
        title: Metrics
        enabled: false
      description: |
        This collector has built-in grouping logic based on the [type of metrics](https://prometheus.io/docs/concepts/metric_types/).

        | Metric                    | Chart                                     | Dimension(s)         | Algorithm   |
        |---------------------------|-------------------------------------------|----------------------|-------------|
        | Gauge                     | for each label set                        | one, the metric name | absolute    |
        | Counter                   | for each label set                        | one, the metric name | incremental |
        | Summary (quantiles)       | for each label set (excluding 'quantile') | for each quantile    | absolute    |
        | Summary (sum and count)   | for each label set                        | the metric name      | incremental |
        | Histogram (buckets)       | for each label set (excluding 'le')       | for each bucket      | incremental |
        | Histogram (sum and count) | for each label set                        | the metric name      | incremental |

        Untyped metrics (have no '# TYPE') processing:

        - As Counter or Gauge depending on pattern match when 'fallback_type' is used.
        - As Counter if it has suffix '_total'.
        - As Summary if it has 'quantile' label.
        - As Histogram if it has 'le' label.

        **The rest are ignored**.
      availability: []
      scopes: []
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: A10 ACOS network devices
        link: https://github.com/a10networks/PrometheusExporter
        icon_filename: a10-networks.png
        categories:
          - data-collection.networking-stack-and-network-interfaces
      keywords:
        - network monitoring
        - network performance
        - traffic analysis
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor A10 Networks device metrics for comprehensive management and analysis.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [A10-Networks Prometheus Exporter](https://github.com/a10networks/PrometheusExporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [A10-Networks Prometheus Exporter](https://github.com/a10networks/PrometheusExporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Apache Airflow
        link: https://github.com/shalb/airflow-exporter
        icon_filename: airflow.png
        categories:
          - data-collection.apm
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor Apache Airflow metrics to optimize task scheduling and workflow management.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Airflow exporter](https://github.com/shalb/airflow-exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Airflow exporter](https://github.com/shalb/airflow-exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Alibaba Cloud
        link: https://github.com/aylei/aliyun-exporter # FIXME: This repository has been archived by the owner on Oct 28, 2019
        icon_filename: alibaba-cloud.png
        categories:
          - data-collection.cloud-provider-managed
      keywords:
        - cloud services
        - cloud computing
        - scalability
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor Alibaba Cloud services and resources for efficient management and cost optimization.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Alibaba Cloud Exporter](https://github.com/aylei/aliyun-exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Alibaba Cloud Exporter](https://github.com/aylei/aliyun-exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Apache Flink
        link: https://github.com/matsumana/flink_exporter
        icon_filename: apache_flink.png
        categories:
          - data-collection.apm
      keywords:
        - web server
        - http
        - https
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Keep an eye on Apache Flink metrics for efficient stream processing and application management.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Apache Flink Metrics Reporter](https://github.com/matsumana/flink_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Apache Flink Metrics Reporter](https://github.com/matsumana/flink_exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Aruba devices
        link: https://github.com/slashdoom/aruba_exporter
        icon_filename: aruba.png
        categories:
          - data-collection.networking-stack-and-network-interfaces
      keywords:
        - network monitoring
        - network performance
        - aruba devices
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor Aruba Networks devices performance metrics for comprehensive network management and analysis.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Aruba Exporter](https://github.com/slashdoom/aruba_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Aruba Exporter](https://github.com/slashdoom/aruba_exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: AWS EC2 Compute instances
        link: https://github.com/O1ahmad/aws_ec2_exporter
        icon_filename: aws-ec2.png
        categories:
          - data-collection.cloud-provider-managed
      keywords:
        - cloud services
        - cloud computing
        - aws services
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Track AWS EC2 instances key metrics for optimized performance and cost management.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [AWS EC2 Exporter](https://github.com/O1ahmad/aws_ec2_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [AWS EC2 Exporter](https://github.com/O1ahmad/aws_ec2_exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: AWS ECS
        link: https://github.com/bevers222/ecs-exporter
        icon_filename: amazon-ecs.png
        categories:
          - data-collection.cloud-provider-managed
      keywords:
        - cloud services
        - cloud computing
        - aws services
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Keep an eye on AWS ECS services and resources for optimized container management and orchestration.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [AWS ECS exporter](https://github.com/bevers222/ecs-exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [AWS ECS exporter](https://github.com/bevers222/ecs-exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: AWS Health events
        link: https://github.com/vladvasiliu/aws-health-exporter-rs
        icon_filename: aws.png
        categories:
          - data-collection.cloud-provider-managed
      keywords:
        - cloud services
        - cloud computing
        - aws services
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Track AWS service health metrics for proactive incident management and resolution.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [AWS Health Exporter](https://github.com/vladvasiliu/aws-health-exporter-rs) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [AWS Health Exporter](https://github.com/vladvasiliu/aws-health-exporter-rs) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: AWS instance health
        link: https://github.com/bobtfish/aws-instance-health-exporter
        icon_filename: aws.png
        categories:
          - data-collection.cloud-provider-managed
      keywords:
        - cloud services
        - cloud computing
        - aws services
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor the health of AWS instances for improved performance and availability.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [AWS instance health exporter](https://github.com/bobtfish/aws-instance-health-exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [AWS instance health exporter](https://github.com/bobtfish/aws-instance-health-exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: AWS S3 buckets
        link: https://github.com/ribbybibby/s3_exporter
        icon_filename: aws-s3.png
        categories:
          - data-collection.cloud-provider-managed
      keywords:
        - cloud services
        - cloud computing
        - aws services
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor AWS S3 storage metrics for optimized performance, data management, and cost efficiency.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [AWS S3 Exporter](https://github.com/ribbybibby/s3_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [AWS S3 Exporter](https://github.com/ribbybibby/s3_exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: AWS SQS
        link: https://github.com/jmal98/sqs-exporter
        icon_filename: aws-sqs.png
        categories:
          - data-collection.cloud-provider-managed
      keywords:
        - cloud services
        - cloud computing
        - aws services
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Track AWS SQS messaging metrics for efficient message processing and queue management.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [AWS SQS Exporter](https://github.com/jmal98/sqs-exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [AWS SQS Exporter](https://github.com/jmal98/sqs-exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Azure AD App passwords
        link: https://github.com/vladvasiliu/azure-app-secrets-monitor
        icon_filename: azure.png
        categories:
          - data-collection.cloud-provider-managed
      keywords:
        - cloud services
        - cloud computing
        - azure services
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Safeguard and track Azure App secrets for enhanced security and access management.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Azure App Secrets monitor](https://github.com/vladvasiliu/azure-app-secrets-monitor) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Azure App Secrets monitor](https://github.com/vladvasiliu/azure-app-secrets-monitor) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Azure Elastic Pool SQL
        link: https://github.com/benclapp/azure_elastic_sql_exporter
        icon_filename: azure-elastic-sql.png
        categories:
          - data-collection.cloud-provider-managed
      keywords:
        - database
        - relational db
        - data querying
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor Azure Elastic SQL performance metrics for efficient database management and query optimization.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Azure Elastic SQL Exporter](https://github.com/benclapp/azure_elastic_sql_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Azure Elastic SQL Exporter](https://github.com/benclapp/azure_elastic_sql_exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Azure application
        link: https://github.com/RobustPerception/azure_metrics_exporter
        icon_filename: azure.png
        categories:
          - data-collection.cloud-provider-managed
      keywords:
        - cloud services
        - cloud computing
        - azure services
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Track Azure Monitor metrics for comprehensive resource management and performance optimization.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Azure Monitor exporter](https://github.com/RobustPerception/azure_metrics_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Azure Monitor exporter](https://github.com/RobustPerception/azure_metrics_exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Azure Resources
        link: https://github.com/FXinnovation/azure-resources-exporter
        icon_filename: azure.png
        categories:
          - data-collection.cloud-provider-managed
      keywords:
        - cloud services
        - cloud computing
        - azure services
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Keep tabs on Azure resources vital metrics for efficient cloud management and cost optimization.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Azure Resources Exporter](https://github.com/FXinnovation/azure-resources-exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Azure Resources Exporter](https://github.com/FXinnovation/azure-resources-exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Azure Service Bus
        link: https://github.com/marcinbudny/servicebus_exporter
        icon_filename: azure-service-bus.png
        categories:
          - data-collection.cloud-provider-managed
      keywords:
        - cloud services
        - cloud computing
        - azure services
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor Azure Service Bus messaging metrics for optimized communication and integration.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Azure Service Bus Exporter](https://github.com/marcinbudny/servicebus_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Azure Service Bus Exporter](https://github.com/marcinbudny/servicebus_exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Azure SQL
        link: https://github.com/iamseth/azure_sql_exporter
        icon_filename: azure-sql.png
        categories:
          - data-collection.cloud-provider-managed
      keywords:
        - database
        - relational db
        - data querying
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Track Azure SQL performance metrics for efficient database management and query performance.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Azure SQL exporter](https://github.com/iamseth/azure_sql_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Azure SQL exporter](https://github.com/iamseth/azure_sql_exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: BigQuery
        link: https://github.com/m-lab/prometheus-bigquery-exporter
        icon_filename: bigquery.png
        categories:
          - data-collection.cloud-provider-managed
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor Google BigQuery metrics for optimized data processing and analysis.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [BigQuery Exporter](https://github.com/m-lab/prometheus-bigquery-exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [BigQuery Exporter](https://github.com/m-lab/prometheus-bigquery-exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Blackbox
        link: https://github.com/prometheus/blackbox_exporter
        icon_filename: prometheus.png
        categories:
          - data-collection.synthetic-checks
      keywords:
        - blackbox
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Track external service availability and response times with Blackbox monitoring.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Blackbox exporter](https://github.com/prometheus/blackbox_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Blackbox exporter](https://github.com/prometheus/blackbox_exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Borg backup
        link: https://github.com/k0ral/borg-exporter
        icon_filename: borg.png
        categories:
          - data-collection.storage-mount-points-and-filesystems
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Track Borg backup performance metrics for efficient data protection and recovery.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Borg backup exporter](https://github.com/k0ral/borg-exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Borg backup exporter](https://github.com/k0ral/borg-exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: cAdvisor
        link: https://github.com/google/cadvisor
        icon_filename: cadvisor.png
        categories:
          - data-collection.containers-and-vms
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor container resource usage and performance metrics with cAdvisor for efficient container management.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [cAdvisor](https://github.com/google/cadvisor) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [cAdvisor](https://github.com/google/cadvisor) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Cilium Agent
        link: https://github.com/cilium/cilium
        icon_filename: cilium.png
        categories:
          - data-collection.kubernetes
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Keep an eye on Cilium Agent metrics for optimized network security and connectivity.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Cilium Agent](https://github.com/cilium/cilium) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Cilium Agent](https://github.com/cilium/cilium) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Cilium Operator
        link: https://github.com/cilium/cilium
        icon_filename: cilium.png
        categories:
          - data-collection.kubernetes
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor Cilium Operator metrics for efficient Kubernetes network security management.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Cilium Operator](https://github.com/cilium/cilium) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Cilium Operator](https://github.com/cilium/cilium) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Cilium Proxy
        link: https://github.com/cilium/proxy
        icon_filename: cilium.png
        categories:
          - data-collection.kubernetes
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Track Cilium Proxy metrics for enhanced network security and performance.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Cilium Proxy](https://github.com/cilium/proxy) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Cilium Proxy](https://github.com/cilium/proxy) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Cisco ACI
        link: https://github.com/RavuAlHemio/prometheus_aci_exporter
        icon_filename: cisco.png
        categories:
          - data-collection.networking-stack-and-network-interfaces
      keywords:
        - network monitoring
        - network performance
        - cisco devices
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor Cisco ACI infrastructure metrics for optimized network performance and resource management.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Cisco ACI Exporter](https://github.com/RavuAlHemio/prometheus_aci_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Cisco ACI Exporter](https://github.com/RavuAlHemio/prometheus_aci_exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Citrix NetScaler
        link: https://github.com/rokett/Citrix-NetScaler-Exporter
        icon_filename: netscaler.png
        categories:
          - data-collection.networking-stack-and-network-interfaces
      keywords:
        - network monitoring
        - network performance
        - traffic analysis
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Keep tabs on NetScaler performance metrics for efficient application delivery and load balancing.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Citrix NetScaler Exporter](https://github.com/rokett/Citrix-NetScaler-Exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Citrix NetScaler Exporter](https://github.com/rokett/Citrix-NetScaler-Exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: ClickHouse
        link: https://github.com/ClickHouse/ClickHouse
        icon_filename: clickhouse.png
        categories:
          - data-collection.database-servers
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor ClickHouse database metrics for efficient data storage and query performance.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to the ClickHouse built-in Prometheus exporter and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Configure built-in Prometheus exporter
            description: |
              To configure the built-in Prometheus exporter, follow the [official documentation](https://clickhouse.com/docs/en/operations/server-configuration-parameters/settings#server_configuration_parameters-prometheus).
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Cloudflare PCAP
        link: https://github.com/wehkamp/docker-prometheus-cloudflare-exporter
        icon_filename: cloudflare.png
        categories:
          - data-collection.cloud-provider-managed
      keywords:
        - cloud services
        - cloud computing
        - scalability
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Keep tabs on Cloudflare CDN and security metrics for optimized content delivery and protection.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Cloudflare exporter](https://github.com/wehkamp/docker-prometheus-cloudflare-exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Cloudflare exporter](https://github.com/wehkamp/docker-prometheus-cloudflare-exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: CloudWatch
        link: https://github.com/prometheus/cloudwatch_exporter
        icon_filename: aws-cloudwatch.png
        categories:
          - data-collection.cloud-provider-managed
      keywords:
        - cloud services
        - cloud computing
        - scalability
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor AWS CloudWatch metrics for comprehensive AWS resource management and performance optimization.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [CloudWatch exporter](https://github.com/prometheus/cloudwatch_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [CloudWatch exporter](https://github.com/prometheus/cloudwatch_exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Concourse
        link: https://concourse-ci.org
        icon_filename: concourse.png
        categories:
          - data-collection.ci-cd-systems
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor Concourse CI/CD pipeline metrics for optimized workflow management and deployment.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to the Concourse built-in Prometheus exporter and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Configure built-in Prometheus exporter
            description: |
              To configure the built-in Prometheus exporter, follow the [official documentation](https://concourse-ci.org/metrics.html#configuring-metrics).
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Crowdsec
        link: https://docs.crowdsec.net/docs/observability/prometheus
        icon_filename: crowdsec.png
        categories:
          - data-collection.apm
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor Crowdsec security metrics for efficient threat detection and response.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to the Crowdsec build-in Prometheus exporter and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Configure built-in Prometheus exporter
            description: |
              To configure the built-in Prometheus exporter, follow the [official documentation](https://docs.crowdsec.net/docs/observability/prometheus/).
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Dell EMC ECS cluster
        link: https://github.com/paychex/prometheus-emcecs-exporter
        icon_filename: dell-emc-ecs.png
        categories:
          - data-collection.cloud-provider-managed
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor Dell EMC ECS object storage metrics for optimized storage management and performance.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Dell EMC ECS Exporter](https://github.com/paychex/prometheus-emcecs-exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Dell EMC ECS Exporter](https://github.com/paychex/prometheus-emcecs-exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Dell EMC Isilon cluster
        link: https://github.com/paychex/prometheus-isilon-exporter
        icon_filename: dell-emc-isilon.png
        categories:
          - data-collection.storage-mount-points-and-filesystems
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Track Dell EMC Isilon scale-out NAS metrics for efficient storage management and performance.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Dell EMC Isilon Exporter](https://github.com/paychex/prometheus-isilon-exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Dell EMC Isilon Exporter](https://github.com/paychex/prometheus-isilon-exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: DigitalOcean
        link: https://github.com/metalmatze/digitalocean_exporter
        icon_filename: digitalocean.png
        categories:
          - data-collection.cloud-provider-managed
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Track DigitalOcean cloud provider metrics for optimized resource management and performance.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [DigitalOcean Exporter](https://github.com/metalmatze/digitalocean_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [DigitalOcean Exporter](https://github.com/metalmatze/digitalocean_exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Discourse
        link: https://github.com/discourse/discourse-prometheus
        icon_filename: discourse.png
        categories:
          - data-collection.web-servers-and-web-proxies
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor Discourse forum metrics for efficient community management and engagement.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Discourse Exporter](https://github.com/discourse/discourse-prometheus) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Discourse Exporter](https://github.com/discourse/discourse-prometheus) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Network UPS Tools
        link: https://github.com/HON95/prometheus-nut-exporter
        icon_filename: nut.png
        categories:
          - data-collection.ups
      keywords:
        - network monitoring
        - network performance
        - traffic analysis
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Track Network UPS Tools (NUT) metrics for efficient uninterruptible power supply management and monitoring.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Network UPS Tools exporter](https://github.com/HON95/prometheus-nut-exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Network UPS Tools exporter](https://github.com/HON95/prometheus-nut-exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Dynatrace
        link: https://github.com/Apside-TOP/dynatrace_exporter
        icon_filename: dynatrace.png
        categories:
          - data-collection.apm
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor Dynatrace APM metrics for comprehensive application performance management.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Dynatrace Exporter](https://github.com/Apside-TOP/dynatrace_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Dynatrace Exporter](https://github.com/Apside-TOP/dynatrace_exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: EOS
        link: https://eos-web.web.cern.ch/eos-web/
        icon_filename: eos.png
        categories:
          - data-collection.storage-mount-points-and-filesystems
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor CERN EOS metrics for efficient storage management.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [EOS exporter](https://github.com/cern-eos/eos_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [EOS exporter](https://github.com/cern-eos/eos_exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: etcd
        link: https://etcd.io/
        icon_filename: etcd.png
        categories:
          - data-collection.service-discovery-registry
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Track etcd database metrics for optimized distributed key-value store management and performance.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to etcd built-in Prometheus exporter and parsing the response.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Fortigate firewall
        link: https://github.com/bluecmd/fortigate_exporter
        icon_filename: fortinet.png
        categories:
          - data-collection.networking-stack-and-network-interfaces
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Keep tabs on Fortigate firewall metrics for enhanced network protection and management.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [fortigate_exporter](https://github.com/bluecmd/fortigate_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [fortigate_exporter](https://github.com/bluecmd/fortigate_exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: FreeBSD NFS
        link: https://github.com/Axcient/freebsd-nfs-exporter
        icon_filename: freebsd.jpg
        categories:
          - data-collection.freebsd-systems
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor FreeBSD Network File System metrics for efficient file sharing management and performance.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [FreeBSD NFS Exporter](https://github.com/Axcient/freebsd-nfs-exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [FreeBSD NFS Exporter](https://github.com/Axcient/freebsd-nfs-exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: FreeBSD RCTL/RACCT
        link: https://github.com/yo000/rctl_exporter
        icon_filename: freebsd.jpg
        categories:
          - data-collection.freebsd-systems
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Keep an eye on FreeBSD Resource Container metrics for optimized resource management and performance.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [FreeBSD RCTL Exporter](https://github.com/yo000/rctl_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [FreeBSD RCTL Exporter](https://github.com/yo000/rctl_exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: GCP GCE
        link: https://github.com/O1ahmad/gcp-gce-exporter
        icon_filename: gcp-gce.png
        categories:
          - data-collection.cloud-provider-managed
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Keep an eye on Google Cloud Platform Compute Engine metrics for efficient cloud resource management and performance.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [GCP GCE Exporter](https://github.com/O1ahmad/gcp-gce-exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [GCP GCE Exporter](https://github.com/O1ahmad/gcp-gce-exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: GCP Quota
        link: https://github.com/mintel/gcp-quota-exporter
        icon_filename: gcp.png
        categories:
          - data-collection.cloud-provider-managed
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor Google Cloud Platform quota metrics for optimized resource usage and cost management.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [GCP Quota Exporter](https://github.com/mintel/gcp-quota-exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [GCP Quota Exporter](https://github.com/mintel/gcp-quota-exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: GitHub repository
        link: https://github.com/githubexporter/github-exporter
        icon_filename: github.png
        categories:
          - data-collection.apm
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Track GitHub repository metrics for optimized project and user analytics monitoring.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [GitHub Exporter](https://github.com/githubexporter/github-exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [GitHub Exporter](https://github.com/githubexporter/github-exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: GitLab Runner
        link: https://gitlab.com/gitlab-org/gitlab-runner
        icon_filename: gitlab.png
        categories:
          - data-collection.ci-cd-systems
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Keep an eye on GitLab CI/CD job metrics for efficient development and deployment management.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to GitLab built-in Prometheus exporter.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Configure built-in Prometheus exporter
            description: |
              To configure the built-in Prometheus exporter, follow the [official documentation](https://docs.gitlab.com/runner/monitoring/#configuration-of-the-metrics-http-server).
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Gobetween
        link: https://github.com/yyyar/gobetween
        icon_filename: gobetween.png
        categories:
          - data-collection.web-servers-and-web-proxies
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Track Gobetween load balancer metrics for optimized network traffic management and performance.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to Gobetween built-in Prometheus exporter and parsing the response.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Google Cloud Platform
        link: https://github.com/DazWilkin/gcp-exporter
        icon_filename: gcp.png
        categories:
          - data-collection.cloud-provider-managed
      keywords:
        - cloud services
        - cloud computing
        - scalability
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor Google Cloud Platform metrics for comprehensive cloud resource management and performance optimization.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Google Cloud Platform Exporter](https://github.com/DazWilkin/gcp-exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Google Cloud Platform Exporter](https://github.com/DazWilkin/gcp-exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Google Stackdriver
        link: https://github.com/prometheus-community/stackdriver_exporter
        icon_filename: gcp-stackdriver.png
        categories:
          - data-collection.cloud-provider-managed
      keywords:
        - cloud services
        - cloud computing
        - google cloud services
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Track Google Stackdriver monitoring metrics for optimized cloud performance and diagnostics.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Google Stackdriver exporter](https://github.com/prometheus-community/stackdriver_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Google Stackdriver exporter](https://github.com/prometheus-community/stackdriver_exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Grafana
        link: https://grafana.com/
        icon_filename: grafana.png
        categories:
          - data-collection.apm
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Keep tabs on Grafana dashboard and visualization metrics for optimized monitoring and data analysis.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to Grafana built-in Prometheus exporter and parsing the response.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Graylog Server
        link: https://github.com/Graylog2/graylog2-server/
        icon_filename: graylog.png
        categories:
          - data-collection.logs-servers
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor Graylog server metrics for efficient log management and analysis.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to Graylog built-in Prometheus exporter and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Configure built-in Prometheus exporter
            description: |
              To configure the built-in Prometheus exporter, follow the [official documentation](https://go2docs.graylog.org/5-0/interacting_with_your_log_data/metrics.html#PrometheusMetricExporting).

  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: HANA
        link: https://github.com/jenningsloy318/hana_exporter
        icon_filename: sap.png
        categories:
          - data-collection.database-servers
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Track SAP HANA database metrics for efficient data storage and query performance.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [HANA Exporter](https://github.com/jenningsloy318/hana_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [HANA Exporter](https://github.com/jenningsloy318/hana_exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Honeypot
        link: https://github.com/Intrinsec/honeypot_exporter
        icon_filename: intrinsec
        categories:
          - data-collection.security-systems
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor honeypot metrics for efficient threat detection and management.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Intrinsec honeypot_exporter](https://github.com/Intrinsec/honeypot_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Intrinsec honeypot_exporter](https://github.com/Intrinsec/honeypot_exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: HP iLO
        link: https://github.com/infinityworks/hpilo-exporter
        icon_filename: hpe.png
        categories:
          - data-collection.hardware-devices-and-sensors
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor HP Integrated Lights Out (iLO) metrics for efficient server management and diagnostics.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [HP iLO Metrics Exporter](https://github.com/infinityworks/hpilo-exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [HP iLO Metrics Exporter](https://github.com/infinityworks/hpilo-exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Hubble
        link: https://github.com/cilium/hubble
        icon_filename: hubble.png
        categories:
          - data-collection.observability
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor Hubble network observability metrics for efficient network visibility and management.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to Hubble built-in Prometheus exporter and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Configure built-in Prometheus exporter
            description: |
              To configure the built-in Prometheus exporter, follow the [official documentation](https://docs.cilium.io/en/stable/observability/metrics/#hubble-metrics).
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: IBM Spectrum
        link: https://github.com/topine/ibm-spectrum-exporter
        icon_filename: ibm-spectrum.png
        categories:
          - data-collection.storage-mount-points-and-filesystems
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor IBM Spectrum storage metrics for efficient data management and performance.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [IBM Spectrum Exporter](https://github.com/topine/ibm-spectrum-exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [IBM Spectrum Exporter](https://github.com/topine/ibm-spectrum-exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: InfluxDB
        link: https://github.com/prometheus/influxdb_exporter
        icon_filename: influxDB.png
        categories:
          - data-collection.database-servers
      keywords:
        - database
        - dbms
        - data storage
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor InfluxDB time-series database metrics for efficient data storage and query performance.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [InfluxDB exporter](https://github.com/prometheus/influxdb_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [InfluxDB exporter](https://github.com/prometheus/influxdb_exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Jenkins
        link: https://www.jenkins.io/
        icon_filename: jenkins.png
        categories:
          - data-collection.apm
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Track Jenkins continuous integration server metrics for efficient development and build management.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Jenkins exporter](https://github.com/simplesurance/jenkins-exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Jenkins exporter](https://github.com/simplesurance/jenkins-exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: JMX
        link: https://github.com/prometheus/jmx_exporter
        icon_filename: jmx-exporter.png
        categories:
          - data-collection.apm
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Track Java Management Extensions (JMX) metrics for efficient Java application management and performance.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [JMX Exporter](https://github.com/prometheus/jmx_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [JMX Exporter](https://github.com/prometheus/jmx_exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: jolokia
        link: https://github.com/aklinkert/jolokia_exporter
        icon_filename: jolokia.png
        categories:
          - data-collection.apm
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor Jolokia JVM metrics for optimized Java application performance and management.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [jolokia_exporter](https://github.com/aklinkert/jolokia_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [jolokia_exporter](https://github.com/aklinkert/jolokia_exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Kafka Consumer Lag
        link: https://github.com/omarsmak/kafka-consumer-lag-monitoring
        icon_filename: kafka.png
        categories:
          - data-collection.message-brokers
      keywords:
        - big data
        - stream processing
        - message broker
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor Kafka consumer lag metrics for efficient message queue management and performance.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Kafka Consumer Lag Monitoring](https://github.com/omarsmak/kafka-consumer-lag-monitoring) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Kafka Consumer Lag Monitoring](https://github.com/omarsmak/kafka-consumer-lag-monitoring) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Kafka
        link: https://github.com/danielqsj/kafka_exporter/
        icon_filename: kafka.png
        categories:
          - data-collection.message-brokers
      keywords:
        - big data
        - stream processing
        - message broker
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Keep an eye on Kafka message queue metrics for optimized data streaming and performance.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Kafka Exporter](https://github.com/danielqsj/kafka_exporter/) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Kafka Exporter](https://github.com/danielqsj/kafka_exporter/) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Kafka ZooKeeper
        link: https://github.com/cloudflare/kafka_zookeeper_exporter
        icon_filename: kafka.png
        categories:
          - data-collection.message-brokers
      keywords:
        - big data
        - stream processing
        - message broker
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor Kafka ZooKeeper metrics for optimized distributed coordination and management.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Kafka ZooKeeper Exporter](https://github.com/cloudflare/kafka_zookeeper_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Kafka ZooKeeper Exporter](https://github.com/cloudflare/kafka_zookeeper_exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Linode
        link: https://github.com/DazWilkin/linode-exporter
        icon_filename: linode.png
        categories:
          - data-collection.cloud-provider-managed
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor Linode cloud hosting metrics for efficient virtual server management and performance.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Linode Exporter](https://github.com/DazWilkin/linode-exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Linode Exporter](https://github.com/DazWilkin/linode-exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: loki
        link: https://github.com/ricoberger/loki_exporter
        icon_filename: loki.png
        categories:
          - data-collection.logs-servers
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Track Loki log aggregation metrics for efficient log management and analysis.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [loki_exporter](https://github.com/ricoberger/loki_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [loki_exporter](https://github.com/ricoberger/loki_exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Minecraft
        link: https://github.com/sladkoff/minecraft-prometheus-exporter
        icon_filename: bukkit-minecraft.png
        categories:
          - data-collection.gaming
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Track Minecraft server metrics for efficient game server management and performance.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Minecraft Exporter](https://github.com/sladkoff/minecraft-prometheus-exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Minecraft Exporter](https://github.com/sladkoff/minecraft-prometheus-exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: mosquitto
        link: https://github.com/sapcc/mosquitto-exporter
        icon_filename: mosquitto.png
        categories:
          - data-collection.message-brokers
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Keep an eye on Mosquitto MQTT broker metrics for efficient IoT message transport and performance.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [mosquitto exporter](https://github.com/sapcc/mosquitto-exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [mosquitto exporter](https://github.com/sapcc/mosquitto-exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: MP707 USB thermometer
        link: https://github.com/nradchenko/mp707_exporter
        icon_filename: thermometer.png
        categories:
          - data-collection.iot-devices
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Track MP707 power strip metrics for efficient energy management and monitoring.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [MP707 exporter](https://github.com/nradchenko/mp707_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [MP707 exporter](https://github.com/nradchenko/mp707_exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: IBM MQ
        link: https://github.com/agebhar1/mq_exporter
        icon_filename: ibm-mq.png
        categories:
          - data-collection.message-brokers
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Keep tabs on IBM MQ message queue metrics for efficient message transport and performance.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [MQ Exporter](https://github.com/agebhar1/mq_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [MQ Exporter](https://github.com/agebhar1/mq_exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: MQTT Blackbox
        link: https://github.com/inovex/mqtt_blackbox_exporter
        icon_filename: mqtt.png
        categories:
          - data-collection.synthetic-checks
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Track MQTT message transport performance using blackbox testing methods.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [MQTT Blackbox Exporter](https://github.com/inovex/mqtt_blackbox_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [MQTT Blackbox Exporter](https://github.com/inovex/mqtt_blackbox_exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Netapp ONTAP API
        link: https://github.com/sapcc/netapp-api-exporter
        icon_filename: netapp.png
        categories:
          - data-collection.storage-mount-points-and-filesystems
      keywords:
        - network monitoring
        - network performance
        - traffic analysis
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Keep tabs on NetApp ONTAP storage system metrics for efficient data storage management and performance.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Netapp ONTAP API Exporter](https://github.com/sapcc/netapp-api-exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Netapp ONTAP API Exporter](https://github.com/sapcc/netapp-api-exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: NetApp Solidfire
        link: https://github.com/mjavier2k/solidfire-exporter
        icon_filename: netapp.png
        categories:
          - data-collection.storage-mount-points-and-filesystems
      keywords:
        - network monitoring
        - network performance
        - traffic analysis
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Track NetApp Solidfire storage system metrics for efficient data storage management and performance.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [NetApp Solidfire Exporter](https://github.com/mjavier2k/solidfire-exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [NetApp Solidfire Exporter](https://github.com/mjavier2k/solidfire-exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: NetMeter
        link: https://github.com/ssbostan/netmeter-exporter
        icon_filename: netmeter.png
        categories:
          - data-collection.iot-devices
      keywords:
        - network monitoring
        - network performance
        - traffic analysis
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor NetMeter network traffic metrics for efficient network management and performance.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [NetMeter Exporter](https://github.com/ssbostan/netmeter-exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [NetMeter Exporter](https://github.com/ssbostan/netmeter-exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: New Relic
        link: https://github.com/jfindley/newrelic_exporter
        icon_filename: newrelic.png
        categories:
          - data-collection.apm
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor New Relic application performance management metrics for efficient application monitoring and performance.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [New Relic exporter](https://github.com/jfindley/newrelic_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [New Relic exporter](https://github.com/jfindley/newrelic_exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Open vSwitch
        link: https://github.com/digitalocean/openvswitch_exporter
        icon_filename: ovs.png
        categories:
          - data-collection.networking-stack-and-network-interfaces
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Keep an eye on Open vSwitch software-defined networking metrics for efficient network virtualization and performance.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Open vSwitch Exporter](https://github.com/digitalocean/openvswitch_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Open vSwitch Exporter](https://github.com/digitalocean/openvswitch_exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: OpenLDAP
        link: https://github.com/tomcz/openldap_exporter
        icon_filename: openldap.png
        categories:
          - data-collection.authentication-and-authorization
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor OpenLDAP directory service metrics for efficient directory management and performance.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [OpenLDAP Metrics Exporter](https://github.com/tomcz/openldap_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [OpenLDAP Metrics Exporter](https://github.com/tomcz/openldap_exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: OpenStack
        link: https://github.com/CanonicalLtd/prometheus-openstack-exporter
        icon_filename: openstack.png
        categories:
          - data-collection.cloud-provider-managed
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Track OpenStack cloud computing platform metrics for efficient infrastructure management and performance.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Openstack exporter](https://github.com/CanonicalLtd/prometheus-openstack-exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Openstack exporter](https://github.com/CanonicalLtd/prometheus-openstack-exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: OpenVAS
        link: https://github.com/ModeClearCode/openvas_exporter
        icon_filename: openVAS.png
        categories:
          - data-collection.apm
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor OpenVAS vulnerability scanner metrics for efficient security assessment and management.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [OpenVAS exporter](https://github.com/ModeClearCode/openvas_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [OpenVAS exporter](https://github.com/ModeClearCode/openvas_exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Google Pagespeed
        link: https://github.com/foomo/pagespeed_exporter
        icon_filename: google-pagespeed.png
        categories:
          - data-collection.apm
      keywords:
        - cloud services
        - cloud computing
        - google cloud services
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Keep an eye on Google PageSpeed Insights performance metrics for efficient web page optimization and performance.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Pagespeed exporter](https://github.com/foomo/pagespeed_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Pagespeed exporter](https://github.com/foomo/pagespeed_exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Philips Hue
        link: https://github.com/aexel90/hue_exporter
        icon_filename: hue.png
        categories:
          - data-collection.iot-devices
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Keep an eye on Philips Hue smart lighting metrics for efficient home automation and energy management.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Philips Hue Exporter](https://github.com/aexel90/hue_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Philips Hue Exporter](https://github.com/aexel90/hue_exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Podman
        link: https://github.com/containers/prometheus-podman-exporter
        icon_filename: podman.png
        categories:
          - data-collection.containers-and-vms
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Keep tabs on Podman container runtime metrics for efficient container management and performance.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [PODMAN exporter](https://github.com/containers/prometheus-podman-exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [PODMAN exporter](https://github.com/containers/prometheus-podman-exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Proxmox VE
        link: https://github.com/prometheus-pve/prometheus-pve-exporter
        icon_filename: proxmox.png
        categories:
          - data-collection.containers-and-vms
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Keep tabs on Proxmox Virtual Environment metrics for efficient virtualization and container management.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Proxmox VE Exporter](https://github.com/prometheus-pve/prometheus-pve-exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Proxmox VE Exporter](https://github.com/prometheus-pve/prometheus-pve-exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: RADIUS
        link: https://github.com/devon-mar/radius-exporter
        icon_filename: radius.png
        categories:
          - data-collection.networking-stack-and-network-interfaces
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Keep tabs on RADIUS (Remote Authentication Dial-In User Service) protocol metrics for efficient authentication and access management.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [RADIUS exporter](https://github.com/devon-mar/radius-exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [RADIUS exporter](https://github.com/devon-mar/radius-exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: AWS RDS
        link: https://github.com/percona/rds_exporter
        icon_filename: rds.png
        categories:
          - data-collection.database-servers
      keywords:
        - cloud services
        - cloud computing
        - aws services
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor Amazon RDS (Relational Database Service) metrics for efficient cloud database management and performance.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [rds_exporter](https://github.com/percona/rds_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [rds_exporter](https://github.com/percona/rds_exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: RIPE Atlas
        link: https://github.com/czerwonk/atlas_exporter
        icon_filename: ripe.png
        categories:
          - data-collection.networking-stack-and-network-interfaces
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Keep tabs on RIPE Atlas Internet measurement platform metrics for efficient network monitoring and performance.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [RIPE Atlas Exporter](https://github.com/czerwonk/atlas_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [RIPE Atlas Exporter](https://github.com/czerwonk/atlas_exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Sentry
        link: https://github.com/snakecharmer/sentry_exporter
        icon_filename: sentry.png
        categories:
          - data-collection.apm
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Track Sentry error tracking and monitoring platform metrics for efficient application performance and error management.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Sentry Exporter](https://github.com/snakecharmer/sentry_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Sentry Exporter](https://github.com/snakecharmer/sentry_exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Slurm
        link: https://github.com/vpenso/prometheus-slurm-exporter
        icon_filename: slurm.png
        categories:
          - data-collection.provisioning-systems
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Track Slurm workload manager metrics for efficient high-performance computing (HPC) and cluster management.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [slurm exporter](https://github.com/vpenso/prometheus-slurm-exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [slurm exporter](https://github.com/vpenso/prometheus-slurm-exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: IPMI (By SoundCloud)
        link: https://github.com/prometheus-community/ipmi_exporter
        icon_filename: soundcloud.png
        categories:
          - data-collection.hardware-devices-and-sensors
      keywords:
        - cloud services
        - cloud computing
        - scalability
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor IPMI metrics externally for efficient server hardware management and monitoring.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [SoundCloud IPMI Exporter (querying IPMI externally, blackbox-exporter style)](https://github.com/prometheus-community/ipmi_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [SoundCloud IPMI Exporter (querying IPMI externally, blackbox-exporter style)](https://github.com/prometheus-community/ipmi_exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Spacelift
        link: https://github.com/spacelift-io/prometheus-exporter
        icon_filename: spacelift.png
        categories:
          - data-collection.cloud-provider-managed
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Track Spacelift infrastructure-as-code (IaC) platform metrics for efficient infrastructure automation and management.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Spacelift Exporter](https://github.com/spacelift-io/prometheus-exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Spacelift Exporter](https://github.com/spacelift-io/prometheus-exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: SSH
        link: https://github.com/Nordstrom/ssh_exporter
        icon_filename: ssh.png
        categories:
          - data-collection.authentication-and-authorization
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor SSH server metrics for efficient secure shell server management and performance.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [SSH Exporter](https://github.com/Nordstrom/ssh_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [SSH Exporter](https://github.com/Nordstrom/ssh_exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: SSL Certificate
        link: https://github.com/ribbybibby/ssl_exporter
        icon_filename: ssl.png
        categories:
          - data-collection.authentication-and-authorization
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Track SSL/TLS certificate metrics for efficient web security and certificate management.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [SSL Certificate exporter](https://github.com/ribbybibby/ssl_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [SSL Certificate exporter](https://github.com/ribbybibby/ssl_exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Starlink (SpaceX)
        link: https://github.com/danopstech/starlink_exporter
        icon_filename: starlink.png
        categories:
          - data-collection.iot-devices
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor SpaceX Starlink satellite internet metrics for efficient internet service management and performance.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Starlink Exporter (SpaceX)](https://github.com/danopstech/starlink_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Starlink Exporter (SpaceX)](https://github.com/danopstech/starlink_exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: StatusPage
        link: https://github.com/vladvasiliu/statuspage-exporter
        icon_filename: statuspage.png
        categories:
          - data-collection.notifications
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor StatusPage.io incident and status metrics for efficient incident management and communication.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [StatusPage Exporter](https://github.com/vladvasiliu/statuspage-exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [StatusPage Exporter](https://github.com/vladvasiliu/statuspage-exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: TACACS
        link: https://github.com/devon-mar/tacacs-exporter
        icon_filename: tacacs.png
        categories:
          - data-collection.authentication-and-authorization
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Track Terminal Access Controller Access-Control System (TACACS) protocol metrics for efficient network authentication and authorization management.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [TACACS Exporter](https://github.com/devon-mar/tacacs-exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [TACACS Exporter](https://github.com/devon-mar/tacacs-exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Tesla vehicle
        link: https://github.com/wywywywy/tesla-prometheus-exporter
        icon_filename: tesla.png
        categories:
          - data-collection.iot-devices
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Track Tesla vehicle metrics for efficient electric vehicle management and monitoring.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Tesla exporter](https://github.com/wywywywy/tesla-prometheus-exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Tesla exporter](https://github.com/wywywywy/tesla-prometheus-exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Tesla Powerwall
        link: https://github.com/foogod/powerwall_exporter
        icon_filename: tesla.png
        categories:
          - data-collection.iot-devices
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor Tesla Powerwall metrics for efficient home energy storage and management.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Tesla Powerwall Exporter](https://github.com/foogod/powerwall_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Tesla Powerwall Exporter](https://github.com/foogod/powerwall_exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Twitch
        link: https://github.com/damoun/twitch_exporter
        icon_filename: twitch.png
        categories:
          - data-collection.media-streaming-servers
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Track Twitch streaming platform metrics for efficient live streaming management and performance.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Twitch exporter](https://github.com/damoun/twitch_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Twitch exporter](https://github.com/damoun/twitch_exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Ubiquiti UFiber OLT
        link: https://github.com/swoga/ufiber-exporter
        icon_filename: ubiquiti.png
        categories:
          - data-collection.networking-stack-and-network-interfaces
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Track Ubiquiti UFiber GPON (Gigabit Passive Optical Network) device metrics for efficient fiber-optic network management and performance.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [ufiber-exporter](https://github.com/swoga/ufiber-exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [ufiber-exporter](https://github.com/swoga/ufiber-exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Uptimerobot
        link: https://github.com/wosc/prometheus-uptimerobot
        icon_filename: uptimerobot.png
        categories:
          - data-collection.synthetic-checks
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor UptimeRobot website uptime monitoring metrics for efficient website availability tracking and management.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Uptimerobot Exporter](https://github.com/wosc/prometheus-uptimerobot) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Uptimerobot Exporter](https://github.com/wosc/prometheus-uptimerobot) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: HashiCorp Vault secrets
        link: https://github.com/tomtom-international/vault-assessment-prometheus-exporter
        icon_filename: vault.png
        categories:
          - data-collection.authentication-and-authorization
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Track HashiCorp Vault security assessment metrics for efficient secrets management and security.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Vault Assessment Prometheus Exporter](https://github.com/tomtom-international/vault-assessment-prometheus-exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Vault Assessment Prometheus Exporter](https://github.com/tomtom-international/vault-assessment-prometheus-exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Vault PKI
        link: https://github.com/aarnaud/vault-pki-exporter
        icon_filename: vault.png
        categories:
          - data-collection.authentication-and-authorization
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor HashiCorp Vault Public Key Infrastructure (PKI) metrics for efficient certificate management and security.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Vault PKI Exporter](https://github.com/aarnaud/vault-pki-exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Vault PKI Exporter](https://github.com/aarnaud/vault-pki-exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Vertica
        link: https://github.com/vertica/vertica-prometheus-exporter
        icon_filename: vertica.png
        categories:
          - data-collection.database-servers
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor Vertica analytics database platform metrics for efficient database performance and management.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [vertica-prometheus-exporter](https://github.com/vertica/vertica-prometheus-exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [vertica-prometheus-exporter](https://github.com/vertica/vertica-prometheus-exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: VMWare
        link: https://github.com/pryorda/vmware_exporter
        icon_filename: vmware.png
        categories:
          - data-collection.cloud-provider-managed
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Keep tabs on VMWare virtualization platform metrics for efficient virtual infrastructure management and performance.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [VMWare exporter](https://github.com/pryorda/vmware_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [VMWare exporter](https://github.com/pryorda/vmware_exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: VSCode
        link: https://github.com/guicaulada/vscode-exporter
        icon_filename: vscode.png
        categories:
          - data-collection.apm
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Track Visual Studio Code editor metrics for efficient development environment management and performance.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [VSCode Exporter](https://github.com/guicaulada/vscode-exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [VSCode Exporter](https://github.com/guicaulada/vscode-exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Airthings Waveplus air sensor
        link: https://github.com/jeremybz/waveplus_exporter
        icon_filename: airthings.png
        categories:
          - data-collection.iot-devices
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Track Waveplus radon sensor metrics for efficient indoor air quality monitoring and management.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Waveplus Radon Sensor Exporter](https://github.com/jeremybz/waveplus_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Waveplus Radon Sensor Exporter](https://github.com/jeremybz/waveplus_exporter) by following the instructions mentioned in the exporter README.

  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: XMPP Server
        link: https://github.com/horazont/xmpp-blackbox-exporter
        icon_filename: xmpp.png
        categories:
          - data-collection.message-brokers
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor XMPP (Extensible Messaging and Presence Protocol) server metrics for efficient messaging and communication management.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [XMPP Server Exporter](https://github.com/horazont/xmpp-blackbox-exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [XMPP Server Exporter](https://github.com/horazont/xmpp-blackbox-exporter) by following the instructions mentioned in the exporter README.

  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: 4D Server
        link: https://github.com/ThomasMaul/Prometheus_4D_Exporter
        icon_filename: 4d_server.png
        categories:
          - data-collection.database-servers
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor 4D Server performance metrics for efficient application management and optimization.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [4D Server exporter](https://github.com/ThomasMaul/Prometheus_4D_Exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [4D Server exporter](https://github.com/ThomasMaul/Prometheus_4D_Exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: 8430FT modem
        link: https://github.com/dernasherbrezon/8430ft_exporter
        icon_filename: 8430ft.png
        categories:
          - data-collection.iot-devices
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Keep track of vital metrics from the MTS 8430FT modem for streamlined network performance and diagnostics.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [8430FT Exporter](https://github.com/dernasherbrezon/8430ft_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [8430FT Exporter](https://github.com/dernasherbrezon/8430ft_exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: A2S
        link: https://github.com/armsnyder/a2s-exporter
        icon_filename: a2s.png
        categories:
          - data-collection.gaming
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Gain insights into Steam A2S-supported game servers for performance and availability through real-time metric monitoring.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [A2S Exporter](https://github.com/armsnyder/a2s-exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [A2S Exporter](https://github.com/armsnyder/a2s-exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Akamai Edge DNS Traffic
        link: https://github.com/akamai/akamai-edgedns-traffic-exporter
        icon_filename: akamai.png
        categories:
          - data-collection.dns-and-dhcp-servers
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Track and analyze Akamai Edge DNS traffic for enhanced performance and security.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Akamai Edge DNS Traffic Exporter](https://github.com/akamai/akamai-edgedns-traffic-exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Akamai Edge DNS Traffic Exporter](https://github.com/akamai/akamai-edgedns-traffic-exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Akamai Global Traffic Management
        link: https://github.com/akamai/akamai-gtm-metrics-exporter
        icon_filename: akamai.png
        categories:
          - data-collection.cloud-provider-managed
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor vital metrics of Akamai Global Traffic Management (GTM) for optimized load balancing and failover.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Akamai Global Traffic Management Metrics Exporter](https://github.com/akamai/akamai-gtm-metrics-exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Akamai Global Traffic Management Metrics Exporter](https://github.com/akamai/akamai-gtm-metrics-exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Alamos FE2 server
        link: https://github.com/codemonauts/prometheus-fe2-exporter
        icon_filename: alamos_fe2.png
        categories:
          - data-collection.apm
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Keep tabs on Alamos FE2 systems for improved performance and management.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Alamos FE2 Exporter](https://github.com/codemonauts/prometheus-fe2-exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Alamos FE2 Exporter](https://github.com/codemonauts/prometheus-fe2-exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Altaro Backup
        link: https://github.com/raph2i/altaro_backup_exporter
        icon_filename: altaro.png
        categories:
          - data-collection.storage-mount-points-and-filesystems
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Track Altaro Backup performance metrics to ensure smooth data protection and recovery operations.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Altaro Backup Exporter](https://github.com/raph2i/altaro_backup_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Altaro Backup Exporter](https://github.com/raph2i/altaro_backup_exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: AMD CPU & GPU
        link: https://github.com/amd/amd_smi_exporter
        icon_filename: amd.png
        categories:
          - data-collection.hardware-devices-and-sensors
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor AMD System Management Interface performance for optimized hardware management.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [AMD SMI Exporter](https://github.com/amd/amd_smi_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [AMD SMI Exporter](https://github.com/amd/amd_smi_exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Andrews & Arnold line status
        link: https://github.com/daveio/aaisp-exporter
        icon_filename: andrews-and-arnold.png
        categories:
          - data-collection.networking-stack-and-network-interfaces
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Track Andrews & Arnold Ltd (AAISP) metrics for improved network performance and diagnostics.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Andrews & Arnold line status exporter](https://github.com/daveio/aaisp-exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Andrews & Arnold line status exporter](https://github.com/daveio/aaisp-exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: APIcast
        link: https://github.com/3scale/apicast
        icon_filename: apicast.png
        categories:
          - data-collection.api-gateways
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor APIcast performance metrics to optimize API gateway operations and management.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [APIcast](https://github.com/3scale/apicast) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [APIcast](https://github.com/3scale/apicast) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Apple Time Machine
        link: https://github.com/znerol/prometheus-timemachine-exporter
        icon_filename: apple.png
        categories:
          - data-collection.macos-systems
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Track Apple Time Machine backup metrics for efficient data protection and recovery.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Apple Time Machine Exporter](https://github.com/znerol/prometheus-timemachine-exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Apple Time Machine Exporter](https://github.com/znerol/prometheus-timemachine-exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: ARM HWCPipe
        link: https://github.com/ylz-at/arm-hwcpipe-exporter
        icon_filename: arm.png
        categories:
          - data-collection.hardware-devices-and-sensors
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Keep track of ARM running Android devices and get metrics for efficient performance optimization.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [ARM HWCPipe Exporter](https://github.com/ylz-at/arm-hwcpipe-exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [ARM HWCPipe Exporter](https://github.com/ylz-at/arm-hwcpipe-exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: ArvanCloud CDN
        link: https://github.com/arvancloud/ar-prometheus-exporter
        icon_filename: arvancloud.png
        categories:
          - data-collection.cloud-provider-managed
      keywords:
        - cloud services
        - cloud computing
        - scalability
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Track and analyze ArvanCloud CDN and cloud services performance metrics for optimized delivery and management.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [ArvanCloud exporter](https://github.com/arvancloud/ar-prometheus-exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [ArvanCloud exporter](https://github.com/arvancloud/ar-prometheus-exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Audisto
        link: https://github.com/ZeitOnline/audisto_exporter
        icon_filename: audisto.png
        categories:
          - data-collection.apm
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor Audisto SEO and website metrics for improved search performance and optimization.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Audisto exporter](https://github.com/ZeitOnline/audisto_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Audisto exporter](https://github.com/ZeitOnline/audisto_exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: AuthLog
        link: https://github.com/woblerr/authlog_exporter
        icon_filename: linux.png
        categories:
          - data-collection.logs-servers
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor authentication logs for security insights and efficient access management.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [AuthLog Exporter](https://github.com/woblerr/authlog_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [AuthLog Exporter](https://github.com/woblerr/authlog_exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: AWS EC2 Spot Instance
        link: https://github.com/patcadelina/ec2-spot-exporter
        icon_filename: aws-ec2.png
        categories:
          - data-collection.cloud-provider-managed
      keywords:
        - cloud services
        - cloud computing
        - aws services
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor AWS EC2 Spot instances'' performance metrics for efficient resource allocation and cost optimization.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [AWS EC2 Spot Exporter](https://github.com/patcadelina/ec2-spot-exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [AWS EC2 Spot Exporter](https://github.com/patcadelina/ec2-spot-exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: AWS Quota
        link: https://github.com/emylincon/aws_quota_exporter
        icon_filename: aws.png
        categories:
          - data-collection.cloud-provider-managed
      keywords:
        - cloud services
        - cloud computing
        - aws services
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor AWS service quotas for effective resource usage and cost management.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [aws_quota_exporter](https://github.com/emylincon/aws_quota_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [aws_quota_exporter](https://github.com/emylincon/aws_quota_exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Bobcat Miner 300
        link: https://github.com/pperzyna/bobcat_exporter
        icon_filename: bobber.png
        categories:
          - data-collection.iot-devices
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor Bobcat equipment metrics for optimized performance and maintenance management.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Bobcat Exporter](https://github.com/pperzyna/bobcat_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Bobcat Exporter](https://github.com/pperzyna/bobcat_exporter) by following the instructions mentioned in the exporter README.

  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: BOSH
        link: https://github.com/bosh-prometheus/bosh_exporter
        icon_filename: bosh.png
        categories:
          - data-collection.cloud-provider-managed
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Keep an eye on BOSH deployment metrics for improved cloud orchestration and resource management.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [BOSH exporter](https://github.com/bosh-prometheus/bosh_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [BOSH exporter](https://github.com/bosh-prometheus/bosh_exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: bpftrace variables
        link: https://github.com/andreasgerstmayr/bpftrace_exporter
        icon_filename: bpftrace.png
        categories:
          - data-collection.apm
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Track bpftrace metrics for advanced performance analysis and troubleshooting.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [bpftrace exporter](https://github.com/andreasgerstmayr/bpftrace_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [bpftrace exporter](https://github.com/andreasgerstmayr/bpftrace_exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: BungeeCord
        link: https://github.com/weihao/bungeecord-prometheus-exporter
        icon_filename: bungee.png
        categories:
          - data-collection.gaming
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Track BungeeCord proxy server metrics for efficient load balancing and performance management.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [BungeeCord Prometheus Exporter](https://github.com/weihao/bungeecord-prometheus-exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [BungeeCord Prometheus Exporter](https://github.com/weihao/bungeecord-prometheus-exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Celery
        link: https://github.com/ZeitOnline/celery_redis_prometheus
        icon_filename: celery.png
        categories:
          - data-collection.task-queues
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Keep an eye on Celery task queue metrics for optimized task processing and resource management.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Celery Exporter](https://github.com/ZeitOnline/celery_redis_prometheus) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Celery Exporter](https://github.com/ZeitOnline/celery_redis_prometheus) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Checkpoint device
        link: https://github.com/RespiroConsulting/CheckPointExporter
        icon_filename: checkpoint.png
        categories:
          - data-collection.networking-stack-and-network-interfaces
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Track Check Point firewall and security metrics for enhanced network protection and management.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Checkpoint exporter](https://github.com/RespiroConsulting/CheckPointExporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Checkpoint exporter](https://github.com/RespiroConsulting/CheckPointExporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Chia
        link: https://github.com/chia-network/chia-exporter
        icon_filename: chia.png
        categories:
          - data-collection.blockchain-servers
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Track Chia blockchain metrics for optimized farming and resource allocation.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Chia Exporter](https://github.com/chia-network/chia-exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Chia Exporter](https://github.com/chia-network/chia-exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Christ Elektronik CLM5IP power panel
        link: https://github.com/christmann/clm5ip_exporter/
        icon_filename: christelec.png
        categories:
          - data-collection.iot-devices
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor Christ Elektronik CLM5IP device metrics for efficient performance and diagnostics.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Christ Elektronik CLM5IP Exporter](https://github.com/christmann/clm5ip_exporter/) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Christ Elektronik CLM5IP Exporter](https://github.com/christmann/clm5ip_exporter/) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: ClamAV daemon
        link: https://github.com/sergeymakinen/clamav_exporter
        icon_filename: clamav.png
        categories:
          - data-collection.apm
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Track ClamAV antivirus metrics for enhanced threat detection and management.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [ClamAV daemon stats exporter](https://github.com/sergeymakinen/clamav_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [ClamAV daemon stats exporter](https://github.com/sergeymakinen/clamav_exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Clamscan results
        link: https://github.com/FortnoxAB/clamscan-exporter
        icon_filename: clamav.png
        categories:
          - data-collection.apm
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor ClamAV scanning performance metrics for efficient malware detection and analysis.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [clamscan-exporter](https://github.com/FortnoxAB/clamscan-exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [clamscan-exporter](https://github.com/FortnoxAB/clamscan-exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Clash
        link: https://github.com/elonzh/clash_exporter
        icon_filename: clash.png
        categories:
          - data-collection.web-servers-and-web-proxies
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Keep an eye on Clash proxy server metrics for optimized network performance and management.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Clash exporter](https://github.com/elonzh/clash_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Clash exporter](https://github.com/elonzh/clash_exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Cloud Foundry
        link: https://github.com/bosh-prometheus/cf_exporter
        icon_filename: cloud-foundry.png
        categories:
          - data-collection.cloud-provider-managed
      keywords:
        - cloud services
        - cloud computing
        - scalability
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Track Cloud Foundry platform metrics for optimized application deployment and management.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Cloud Foundry exporter](https://github.com/bosh-prometheus/cf_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Cloud Foundry exporter](https://github.com/bosh-prometheus/cf_exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Cloud Foundry Firehose
        link: https://github.com/bosh-prometheus/firehose_exporter
        icon_filename: cloud-foundry.png
        categories:
          - data-collection.cloud-provider-managed
      keywords:
        - cloud services
        - cloud computing
        - scalability
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor Cloud Foundry Firehose metrics for comprehensive platform diagnostics and management.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Cloud Foundry Firehose exporter](https://github.com/bosh-prometheus/firehose_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Cloud Foundry Firehose exporter](https://github.com/bosh-prometheus/firehose_exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Akami Cloudmonitor
        link: https://github.com/ExpressenAB/cloudmonitor_exporter
        icon_filename: akamai.png
        categories:
          - data-collection.cloud-provider-managed
      keywords:
        - cloud services
        - cloud computing
        - scalability
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor Akamai cloudmonitor provider metrics for comprehensive cloud performance management.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Cloudmonitor exporter](https://github.com/ExpressenAB/cloudmonitor_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Cloudmonitor exporter](https://github.com/ExpressenAB/cloudmonitor_exporter) by following the instructions mentioned in the exporter README.

  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Lustre metadata
        link: https://github.com/GSI-HPC/prometheus-cluster-exporter
        icon_filename: lustre.png
        categories:
          - data-collection.cloud-provider-managed
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Keep tabs on Lustre clustered file system for efficient management and performance.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Cluster Exporter](https://github.com/GSI-HPC/prometheus-cluster-exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Cluster Exporter](https://github.com/GSI-HPC/prometheus-cluster-exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: ClusterControl CMON
        link: https://github.com/severalnines/cmon_exporter
        icon_filename: severalnines.png
        categories:
          - data-collection.database-servers
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Track CMON metrics for Severalnines Cluster Control for efficient monitoring and management of database operations.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [CMON Exporter](https://github.com/severalnines/cmon_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [CMON Exporter](https://github.com/severalnines/cmon_exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Collectd
        link: https://github.com/prometheus/collectd_exporter
        icon_filename: collectd.png
        categories:
          - data-collection.generic-data-collection
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor system and application metrics with Collectd for comprehensive performance analysis.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Collectd exporter](https://github.com/prometheus/collectd_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Collectd exporter](https://github.com/prometheus/collectd_exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Shell command
        link: https://github.com/tomwilkie/prom-run
        icon_filename: crunner.png
        categories:
          - data-collection.generic-data-collection
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Track custom command output metrics for tailored monitoring and management.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Command runner exporter](https://github.com/tomwilkie/prom-run) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Command runner exporter](https://github.com/tomwilkie/prom-run) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: CraftBeerPi
        link: https://github.com/jo-hannes/craftbeerpi_exporter
        icon_filename: craftbeer.png
        categories:
          - data-collection.iot-devices
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Keep an eye on CraftBeerPi homebrewing metrics for optimized brewing process management.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [CraftBeerPi exporter](https://github.com/jo-hannes/craftbeerpi_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [CraftBeerPi exporter](https://github.com/jo-hannes/craftbeerpi_exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Crypto exchanges
        link: https://github.com/ix-ai/crypto-exporter
        icon_filename: crypto.png
        categories:
          - data-collection.blockchain-servers
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Track cryptocurrency market metrics for informed investment and trading decisions.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Crypto exporter](https://github.com/ix-ai/crypto-exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Crypto exporter](https://github.com/ix-ai/crypto-exporter) by following the instructions mentioned in the exporter README.

  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Cryptowatch
        link: https://github.com/nbarrientos/cryptowat_exporter
        icon_filename: cryptowatch.png
        categories:
          - data-collection.blockchain-servers
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Keep tabs on Cryptowatch market data metrics for comprehensive cryptocurrency market analysis.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Cryptowat Exporter](https://github.com/nbarrientos/cryptowat_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Cryptowat Exporter](https://github.com/nbarrientos/cryptowat_exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: CS:GO
        link: https://github.com/kinduff/csgo_exporter
        icon_filename: csgo.png
        categories:
          - data-collection.gaming
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor Counter-Strike: Global Offensive server metrics for improved game performance and management.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [CS:GO Exporter](https://github.com/kinduff/csgo_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [CS:GO Exporter](https://github.com/kinduff/csgo_exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Certificate Transparency
        link: https://github.com/Hsn723/ct-exporter
        icon_filename: ct.png
        categories:
          - data-collection.security-systems
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Track certificate transparency log metrics for enhanced
          SSL/TLS certificate management and security.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [ct-exporter](https://github.com/Hsn723/ct-exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [ct-exporter](https://github.com/Hsn723/ct-exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Custom Exporter
        link: https://github.com/orange-cloudfoundry/custom_exporter
        icon_filename: customdata.png
        categories:
          - data-collection.generic-data-collection
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Create and monitor custom metrics tailored to your specific use case and requirements.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Custom Exporter](https://github.com/orange-cloudfoundry/custom_exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Custom Exporter](https://github.com/orange-cloudfoundry/custom_exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: CVMFS clients
        link: https://github.com/guilbaults/cvmfs-exporter
        icon_filename: cvmfs.png
        categories:
          - data-collection.storage-mount-points-and-filesystems
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Track CernVM File System metrics for optimized distributed file system performance and management.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [CVMFS exporter](https://github.com/guilbaults/cvmfs-exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [CVMFS exporter](https://github.com/guilbaults/cvmfs-exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: DDWRT Routers
        link: https://github.com/camelusferus/ddwrt_collector
        icon_filename: ddwrt.png
        categories:
          - data-collection.networking-stack-and-network-interfaces
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Keep tabs on DD-WRT router metrics for efficient network management and performance.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [ddwrt-collector](https://github.com/camelusferus/ddwrt_collector) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [ddwrt-collector](https://github.com/camelusferus/ddwrt_collector) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Dell EMC XtremIO cluster
        link: https://github.com/cthiel42/prometheus-xtremio-exporter
        icon_filename: dell-emc.png
        categories:
          - data-collection.storage-mount-points-and-filesystems
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Keep an eye on Dell/EMC XtremIO storage metrics for optimized data management and performance.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Dell/EMC XtremIO Exporter](https://github.com/cthiel42/prometheus-xtremio-exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Dell/EMC XtremIO Exporter](https://github.com/cthiel42/prometheus-xtremio-exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: Dependency-Track
        link: https://github.com/jetstack/dependency-track-exporter
        icon_filename: dependency-track.png
        categories:
          - data-collection.apm
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor Dependency-Track metrics for efficient vulnerability management and software supply chain analysis.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [Dependency-Track Exporter](https://github.com/jetstack/dependency-track-exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [Dependency-Track Exporter](https://github.com/jetstack/dependency-track-exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: DMARC
        link: https://github.com/jgosmann/dmarc-metrics-exporter
        icon_filename: dmarc.png
        categories:
          - data-collection.mail-servers
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Track DMARC email authentication metrics for improved email security and deliverability.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [dmarc-metrics-exporter](https://github.com/jgosmann/dmarc-metrics-exporter) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [dmarc-metrics-exporter](https://github.com/jgosmann/dmarc-metrics-exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: DNSBL
        link: https://github.com/Luzilla/dnsbl_exporter/
        icon_filename: dns.png
        categories:
          - data-collection.dns-and-dhcp-servers
      keywords: []
    overview:
      <<: *overview
      data_collection:
        metrics_description: |
          Monitor DNSBL metrics for efficient domain reputation and security management.
        method_description: |
          Metrics are gathered by periodically sending HTTP requests to [dnsbl-exporter](https://github.com/Luzilla/dnsbl_exporter/) and parsing the response.
    setup:
      <<: *setup
      prerequisites:
        list:
          - title: Install OpenMetrics Exporter
            description: |
              Install [dnsbl-exporter](https://github.com/Luzilla/dnsbl_exporter/) by following the instructions mentioned in the exporter README.

