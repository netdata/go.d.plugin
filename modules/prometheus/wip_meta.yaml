- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Kafka
      link: https://github.com/danielqsj/kafka_exporter/
      icon_filename: kafka.png
      categories:
        - data-collection.message-brokers
    keywords:
      - big data
      - stream processing
      - message broker
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep an eye on Kafka message queue metrics for optimized data streaming and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Kafka Exporter](https://github.com/danielqsj/kafka_exporter/) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Kafka Exporter](https://github.com/danielqsj/kafka_exporter/) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Kafka ZooKeeper
      link: https://github.com/cloudflare/kafka_zookeeper_exporter
      icon_filename: kafka.png
      categories:
        - data-collection.message-brokers
    keywords:
      - big data
      - stream processing
      - message broker
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Kafka ZooKeeper metrics for optimized distributed coordination and management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Kafka ZooKeeper Exporter](https://github.com/cloudflare/kafka_zookeeper_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Kafka ZooKeeper Exporter](https://github.com/cloudflare/kafka_zookeeper_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Lenovo XClarity
      link: https://github.com/crooks/xclarity_exporter
      icon_filename: lenovo.png
      categories:
        - data-collection.hardware-devices-and-sensors
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track Lenovo XClarity infrastructure management metrics for efficient server and storage management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Lenovo XClarity Exporter](https://github.com/crooks/xclarity_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Lenovo XClarity Exporter](https://github.com/crooks/xclarity_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Linode
      link: https://github.com/DazWilkin/linode-exporter
      icon_filename: linode.png
      categories:
        - data-collection.cloud-provider-managed
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Linode cloud hosting metrics for efficient virtual server management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Linode Exporter](https://github.com/DazWilkin/linode-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Linode Exporter](https://github.com/DazWilkin/linode-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: loki
      link: https://github.com/ricoberger/loki_exporter
      icon_filename: loki.png
      categories:
        - data-collection.logs-servers
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track Loki log aggregation metrics for efficient log management and analysis.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [loki_exporter](https://github.com/ricoberger/loki_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [loki_exporter](https://github.com/ricoberger/loki_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Minecraft
      link: https://github.com/sladkoff/minecraft-prometheus-exporter
      icon_filename: bukkit-minecraft.png
      categories:
        - data-collection.gaming
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track Minecraft server metrics for efficient game server management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Minecraft Exporter](https://github.com/sladkoff/minecraft-prometheus-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Minecraft Exporter](https://github.com/sladkoff/minecraft-prometheus-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: mosquitto
      link: https://github.com/sapcc/mosquitto-exporter
      icon_filename: mosquitto.png
      categories:
        - data-collection.message-brokers
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep an eye on Mosquitto MQTT broker metrics for efficient IoT message transport and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [mosquitto exporter](https://github.com/sapcc/mosquitto-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [mosquitto exporter](https://github.com/sapcc/mosquitto-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: MP707
      link: https://github.com/nradchenko/mp707_exporter
      icon_filename: thermometer.png
      categories:
        - data-collection.iot-devices
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track MP707 power strip metrics for efficient energy management and monitoring.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [MP707 exporter](https://github.com/nradchenko/mp707_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [MP707 exporter](https://github.com/nradchenko/mp707_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: MQ
      link: https://github.com/agebhar1/mq_exporter
      icon_filename: ibm-mq.png
      categories:
        - data-collection.message-brokers
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep tabs on IBM MQ message queue metrics for efficient message transport and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [MQ Exporter](https://github.com/agebhar1/mq_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [MQ Exporter](https://github.com/agebhar1/mq_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: MQTT Blackbox
      link: https://github.com/inovex/mqtt_blackbox_exporter
      icon_filename: mqtt.png
      categories:
        - data-collection.synthetic-checks
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track MQTT message transport performance using blackbox testing methods.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [MQTT Blackbox Exporter](https://github.com/inovex/mqtt_blackbox_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [MQTT Blackbox Exporter](https://github.com/inovex/mqtt_blackbox_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: MythTV
      link: https://github.com/thknepper/mythtv_exporter
      icon_filename: mythTV.png
      categories:
        - data-collection.media-streaming-servers
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track MythTV personal video recorder metrics for efficient media management and playback performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [MythTV Exporter](https://github.com/thknepper/mythtv_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [MythTV Exporter](https://github.com/thknepper/mythtv_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Netapp ONTAP API
      link: https://github.com/sapcc/netapp-api-exporter
      icon_filename: netapp.png
      categories:
        - data-collection.storage-mount-points-and-filesystems
    keywords:
      - network monitoring
      - network performance
      - traffic analysis
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep tabs on NetApp ONTAP storage system metrics for efficient data storage management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Netapp ONTAP API Exporter](https://github.com/sapcc/netapp-api-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Netapp ONTAP API Exporter](https://github.com/sapcc/netapp-api-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: NetApp Solidfire
      link: https://github.com/mjavier2k/solidfire-exporter
      icon_filename: netapp.png
      categories:
        - data-collection.storage-mount-points-and-filesystems
    keywords:
      - network monitoring
      - network performance
      - traffic analysis
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track NetApp Solidfire storage system metrics for efficient data storage management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [NetApp Solidfire Exporter](https://github.com/mjavier2k/solidfire-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [NetApp Solidfire Exporter](https://github.com/mjavier2k/solidfire-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: NetApp Trident
      link: https://github.com/NetApp/trident
      icon_filename: netapp.png
      categories:
        - data-collection.storage-mount-points-and-filesystems
    keywords:
      - network monitoring
      - network performance
      - traffic analysis
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor NetApp Trident container storage metrics for efficient storage provisioning and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [NetApp Trident exporter](https://github.com/NetApp/trident) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [NetApp Trident exporter](https://github.com/NetApp/trident) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: NetMeter
      link: https://github.com/ssbostan/netmeter-exporter
      icon_filename: netmeter.png
      categories:
        - data-collection.iot-devices
    keywords:
      - network monitoring
      - network performance
      - traffic analysis
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor NetMeter network traffic metrics for efficient network management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [NetMeter Exporter](https://github.com/ssbostan/netmeter-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [NetMeter Exporter](https://github.com/ssbostan/netmeter-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: New Relic
      link: https://github.com/jfindley/newrelic_exporter
      icon_filename: newrelic.png
      categories:
        - data-collection.apm
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor New Relic application performance management metrics for efficient application monitoring and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [New Relic exporter](https://github.com/jfindley/newrelic_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [New Relic exporter](https://github.com/jfindley/newrelic_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Open vSwitch
      link: https://github.com/digitalocean/openvswitch_exporter
      icon_filename: ovs.png
      categories:
        - data-collection.networking-stack-and-network-interfaces
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep an eye on Open vSwitch software-defined networking metrics for efficient network virtualization and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Open vSwitch Exporter](https://github.com/digitalocean/openvswitch_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Open vSwitch Exporter](https://github.com/digitalocean/openvswitch_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: OpenLDAP Metrics
      link: https://github.com/tomcz/openldap_exporter
      icon_filename: openldap.png
      categories:
        - data-collection.authentication-and-authorization
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor OpenLDAP directory service metrics for efficient directory management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [OpenLDAP Metrics Exporter](https://github.com/tomcz/openldap_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [OpenLDAP Metrics Exporter](https://github.com/tomcz/openldap_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Openstack Ceilometer
      link: https://github.com/carlpett/openstack-ceilometer_exporter
      icon_filename: openstack.png
      categories:
        - data-collection.cloud-provider-managed
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep an eye on OpenStack Ceilometer telemetry service metrics for efficient cloud resource management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Openstack Ceilometer exporter](https://github.com/carlpett/openstack-ceilometer_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Openstack Ceilometer exporter](https://github.com/carlpett/openstack-ceilometer_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Openstack
      link: https://github.com/CanonicalLtd/prometheus-openstack-exporter
      icon_filename: openstack.png
      categories:
        - data-collection.cloud-provider-managed
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track OpenStack cloud computing platform metrics for efficient infrastructure management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Openstack exporter](https://github.com/CanonicalLtd/prometheus-openstack-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Openstack exporter](https://github.com/CanonicalLtd/prometheus-openstack-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: OpenVAS
      link: https://github.com/ModeClearCode/openvas_exporter
      icon_filename: openVAS.png
      categories:
        - data-collection.apm
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor OpenVAS vulnerability scanner metrics for efficient security assessment and management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [OpenVAS exporter](https://github.com/ModeClearCode/openvas_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [OpenVAS exporter](https://github.com/ModeClearCode/openvas_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Pacemaker
      link: https://github.com/marcan/pacemaker-exporter
      icon_filename: pacemaker.png
      categories:
        - data-collection.apm
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track Pacemaker high-availability cluster metrics for efficient cluster management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Pacemaker exporter](https://github.com/marcan/pacemaker-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Pacemaker exporter](https://github.com/marcan/pacemaker-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Google Pagespeed
      link: https://github.com/foomo/pagespeed_exporter
      icon_filename: google-pagespeed.png
      categories:
        - data-collection.apm
    keywords:
      - cloud services
      - cloud computing
      - google cloud services
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep an eye on Google PageSpeed Insights performance metrics for efficient web page optimization and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Pagespeed exporter](https://github.com/foomo/pagespeed_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Pagespeed exporter](https://github.com/foomo/pagespeed_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Philips Hue
      link: https://github.com/aexel90/hue_exporter
      icon_filename: hue.png
      categories:
        - data-collection.iot-devices
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep an eye on Philips Hue smart lighting metrics for efficient home automation and energy management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Philips Hue Exporter](https://github.com/aexel90/hue_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Philips Hue Exporter](https://github.com/aexel90/hue_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: PODMAN
      link: https://github.com/containers/prometheus-podman-exporter
      icon_filename: podman.png
      categories:
        - data-collection.containers-and-vms
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep tabs on Podman container runtime metrics for efficient container management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [PODMAN exporter](https://github.com/containers/prometheus-podman-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [PODMAN exporter](https://github.com/containers/prometheus-podman-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: PowerShell
      link: https://github.com/rgl/PowerShellExporter
      icon_filename: powershell.png
      categories:
        - data-collection.windows-systems
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track PowerShell script metrics for efficient script execution and performance monitoring.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [PowerShell Exporter](https://github.com/rgl/PowerShellExporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [PowerShell Exporter](https://github.com/rgl/PowerShellExporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Proxmox VE
      link: https://github.com/prometheus-pve/prometheus-pve-exporter
      icon_filename: proxmox.png
      categories:
        - data-collection.containers-and-vms
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep tabs on Proxmox Virtual Environment metrics for efficient virtualization and container management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Proxmox VE Exporter](https://github.com/prometheus-pve/prometheus-pve-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Proxmox VE Exporter](https://github.com/prometheus-pve/prometheus-pve-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: RADIUS
      link: https://github.com/devon-mar/radius-exporter
      icon_filename: radius.png
      categories:
        - data-collection.networking-stack-and-network-interfaces
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep tabs on RADIUS (Remote Authentication Dial-In User Service) protocol metrics for efficient authentication and access management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [RADIUS exporter](https://github.com/devon-mar/radius-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [RADIUS exporter](https://github.com/devon-mar/radius-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: AWS RDS
      link: https://github.com/percona/rds_exporter
      icon_filename: rds.png
      categories:
        - data-collection.database-servers
    keywords:
      - cloud services
      - cloud computing
      - aws services
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Amazon RDS (Relational Database Service) metrics for efficient cloud database management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [rds_exporter](https://github.com/percona/rds_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [rds_exporter](https://github.com/percona/rds_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: RIPE Atlas
      link: https://github.com/czerwonk/atlas_exporter
      icon_filename: ripe.png
      categories:
        - data-collection.networking-stack-and-network-interfaces
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep tabs on RIPE Atlas Internet measurement platform metrics for efficient network monitoring and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [RIPE Atlas Exporter](https://github.com/czerwonk/atlas_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [RIPE Atlas Exporter](https://github.com/czerwonk/atlas_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Ruby
      link: https://github.com/discourse/prometheus_exporter
      icon_filename: ruby.png
      categories:
        - data-collection.apm
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Ruby application metrics for efficient performance tracking and management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Ruby Prometheus Exporter](https://github.com/discourse/prometheus_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Ruby Prometheus Exporter](https://github.com/discourse/prometheus_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Saltstack
      link: https://github.com/BonnierNews/saltstack_exporter
      icon_filename: saltstack.jpg
      categories:
        - data-collection.provisioning-systems
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track SaltStack configuration management metrics for efficient infrastructure automation and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Saltstack exporter](https://github.com/BonnierNews/saltstack_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Saltstack exporter](https://github.com/BonnierNews/saltstack_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Scylla-Cluster-Tests
      link: https://github.com/scylladb/scylla-cluster-tests/
      icon_filename: scylla.png
      categories:
        - data-collection.database-servers
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor ScyllaDB cluster test metrics for efficient database testing and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Scylla-Cluster-Tests Exporter](https://github.com/scylladb/scylla-cluster-tests/) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Scylla-Cluster-Tests Exporter](https://github.com/scylladb/scylla-cluster-tests/) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: ScyllaDB
      link: https://github.com/scylladb/scylladb
      icon_filename: scylla.png
      categories:
        - data-collection.database-servers
    keywords:
      - database
      - dbms
      - data storage
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track ScyllaDB NoSQL database metrics for efficient database management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [ScyllaDB exporter](https://github.com/scylladb/scylladb) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [ScyllaDB exporter](https://github.com/scylladb/scylladb) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Sentry
      link: https://github.com/snakecharmer/sentry_exporter
      icon_filename: sentry.png
      categories:
        - data-collection.apm
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track Sentry error tracking and monitoring platform metrics for efficient application performance and error management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Sentry Exporter](https://github.com/snakecharmer/sentry_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Sentry Exporter](https://github.com/snakecharmer/sentry_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Shield
      link: https://github.com/aexel90/shelly_exporter
      icon_filename: elastic.png
      categories:
        - data-collection.authentication-and-authorization
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep tabs on Elasticsearch Shield security plugin metrics for efficient access control and security management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Shield exporter](https://github.com/aexel90/shelly_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Shield exporter](https://github.com/aexel90/shelly_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Slurm
      link: https://github.com/vpenso/prometheus-slurm-exporter
      icon_filename: slurm.png
      categories:
        - data-collection.provisioning-systems
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track Slurm workload manager metrics for efficient high-performance computing (HPC) and cluster management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [slurm exporter](https://github.com/vpenso/prometheus-slurm-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [slurm exporter](https://github.com/vpenso/prometheus-slurm-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: IPMI (By SoundCloud)
      link: https://github.com/prometheus-community/ipmi_exporter
      icon_filename: soundcloud.png
      categories:
        - data-collection.hardware-devices-and-sensors
    keywords:
      - cloud services
      - cloud computing
      - scalability
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor IPMI metrics externally for efficient server hardware management and monitoring.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [SoundCloud IPMI Exporter (querying IPMI externally, blackbox-exporter style)](https://github.com/prometheus-community/ipmi_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [SoundCloud IPMI Exporter (querying IPMI externally, blackbox-exporter style)](https://github.com/prometheus-community/ipmi_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Spacelift
      link: https://github.com/spacelift-io/prometheus-exporter
      icon_filename: spacelift.png
      categories:
        - data-collection.cloud-provider-managed
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track Spacelift infrastructure-as-code (IaC) platform metrics for efficient infrastructure automation and management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Spacelift Exporter](https://github.com/spacelift-io/prometheus-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Spacelift Exporter](https://github.com/spacelift-io/prometheus-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: SSH
      link: https://github.com/Nordstrom/ssh_exporter
      icon_filename: ssh.png
      categories:
        - data-collection.authentication-and-authorization
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor SSH server metrics for efficient secure shell server management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [SSH Exporter](https://github.com/Nordstrom/ssh_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [SSH Exporter](https://github.com/Nordstrom/ssh_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: SSL Certificate
      link: https://github.com/ribbybibby/ssl_exporter
      icon_filename: ssl.png
      categories:
        - data-collection.authentication-and-authorization
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track SSL/TLS certificate metrics for efficient web security and certificate management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [SSL Certificate exporter](https://github.com/ribbybibby/ssl_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [SSL Certificate exporter](https://github.com/ribbybibby/ssl_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Starlink (SpaceX)
      link: https://github.com/danopstech/starlink_exporter
      icon_filename: starlink.png
      categories:
        - data-collection.iot-devices
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor SpaceX Starlink satellite internet metrics for efficient internet service management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Starlink Exporter (SpaceX)](https://github.com/danopstech/starlink_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Starlink Exporter (SpaceX)](https://github.com/danopstech/starlink_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: StatusPage
      link: https://github.com/vladvasiliu/statuspage-exporter
      icon_filename: statuspage.png
      categories:
        - data-collection.notifications
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor StatusPage.io incident and status metrics for efficient incident management and communication.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [StatusPage Exporter](https://github.com/vladvasiliu/statuspage-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [StatusPage Exporter](https://github.com/vladvasiliu/statuspage-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: StayRTR
      link: https://github.com/bgp/stayrtr
      icon_filename: stayrtr.png
      categories:
        - data-collection.networking-stack-and-network-interfaces
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track RPKI-to-Router (RTR) protocol metrics for efficient routing security and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [StayRTR Exporter](https://github.com/bgp/stayrtr) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [StayRTR Exporter](https://github.com/bgp/stayrtr) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: TACACS
      link: https://github.com/devon-mar/tacacs-exporter
      icon_filename: tacacs.png
      categories:
        - data-collection.authentication-and-authorization
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track Terminal Access Controller Access-Control System (TACACS) protocol metrics for efficient network authentication and authorization management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [TACACS Exporter](https://github.com/devon-mar/tacacs-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [TACACS Exporter](https://github.com/devon-mar/tacacs-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Tesla
      link: https://github.com/wywywywy/tesla-prometheus-exporter
      icon_filename: tesla.png
      categories:
        - data-collection.iot-devices
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track Tesla vehicle metrics for efficient electric vehicle management and monitoring.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Tesla exporter](https://github.com/wywywywy/tesla-prometheus-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Tesla exporter](https://github.com/wywywywy/tesla-prometheus-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Tesla Powerwall
      link: https://github.com/foogod/powerwall_exporter
      icon_filename: tesla.png
      categories:
        - data-collection.iot-devices
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Tesla Powerwall metrics for efficient home energy storage and management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Tesla Powerwall Exporter](https://github.com/foogod/powerwall_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Tesla Powerwall Exporter](https://github.com/foogod/powerwall_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Twitch
      link: https://github.com/damoun/twitch_exporter
      icon_filename: twitch.png
      categories:
        - data-collection.media-streaming-servers
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track Twitch streaming platform metrics for efficient live streaming management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Twitch exporter](https://github.com/damoun/twitch_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Twitch exporter](https://github.com/damoun/twitch_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Ubiquiti UniFi
      link: https://github.com/mdlayher/unifi_exporter
      icon_filename: ubiquiti.png
      categories:
        - data-collection.networking-stack-and-network-interfaces
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Ubiquiti UniFi network device metrics for efficient network management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Ubiquiti UniFi Exporter](https://github.com/mdlayher/unifi_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Ubiquiti UniFi Exporter](https://github.com/mdlayher/unifi_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: 'Ubiquiti UFiber '
      link: https://github.com/swoga/ufiber-exporter
      icon_filename: ubiquiti.png
      categories:
        - data-collection.networking-stack-and-network-interfaces
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track Ubiquiti UFiber GPON (Gigabit Passive Optical Network) device metrics for efficient fiber-optic network management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [ufiber-exporter](https://github.com/swoga/ufiber-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [ufiber-exporter](https://github.com/swoga/ufiber-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: UPnP Internet Gateway Device
      link: https://github.com/yrro/igd-exporter
      icon_filename: upnp.png
      categories:
        - data-collection.networking-stack-and-network-interfaces
    keywords:
      - network monitoring
      - network performance
      - traffic analysis
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track UPnP (Universal Plug and Play) Internet Gateway Device metrics for efficient home network management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [UPnP Internet Gateway Device exporter](https://github.com/yrro/igd-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [UPnP Internet Gateway Device exporter](https://github.com/yrro/igd-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Uptimerobot
      link: https://github.com/wosc/prometheus-uptimerobot
      icon_filename: uptimerobot.png
      categories:
        - data-collection.synthetic-checks
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor UptimeRobot website uptime monitoring metrics for efficient website availability tracking and management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Uptimerobot Exporter](https://github.com/wosc/prometheus-uptimerobot) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Uptimerobot Exporter](https://github.com/wosc/prometheus-uptimerobot) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Vault Assessment
      link: https://github.com/tomtom-international/vault-assessment-prometheus-exporter
      icon_filename: vault.png
      categories:
        - data-collection.authentication-and-authorization
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track HashiCorp Vault security assessment metrics for efficient secrets management and security.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Vault Assessment Prometheus Exporter](https://github.com/tomtom-international/vault-assessment-prometheus-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Vault Assessment Prometheus Exporter](https://github.com/tomtom-international/vault-assessment-prometheus-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Vault PKI
      link: https://github.com/aarnaud/vault-pki-exporter
      icon_filename: vault.png
      categories:
        - data-collection.authentication-and-authorization
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor HashiCorp Vault Public Key Infrastructure (PKI) metrics for efficient certificate management and security.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Vault PKI Exporter](https://github.com/aarnaud/vault-pki-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Vault PKI Exporter](https://github.com/aarnaud/vault-pki-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Vertica
      link: https://github.com/vertica/vertica-prometheus-exporter
      icon_filename: vertica.png
      categories:
        - data-collection.database-servers
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Vertica analytics database platform metrics for efficient database performance and management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [vertica-prometheus-exporter](https://github.com/vertica/vertica-prometheus-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [vertica-prometheus-exporter](https://github.com/vertica/vertica-prometheus-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: VMWare
      link: https://github.com/pryorda/vmware_exporter
      icon_filename: vmware.png
      categories:
        - data-collection.cloud-provider-managed
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep tabs on VMWare virtualization platform metrics for efficient virtual infrastructure management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [VMWare exporter](https://github.com/pryorda/vmware_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [VMWare exporter](https://github.com/pryorda/vmware_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: VMWare Guest
      link: https://github.com/ncabatoff/vmwareguest-exporter
      icon_filename: vmware.png
      categories:
        - data-collection.containers-and-vms
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track VMWare guest virtual machine metrics for efficient virtual machine management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [VMWare Guest exporter](https://github.com/ncabatoff/vmwareguest-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [VMWare Guest exporter](https://github.com/ncabatoff/vmwareguest-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: VSCode
      link: https://github.com/guicaulada/vscode-exporter
      icon_filename: vscode.png
      categories:
        - data-collection.apm
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track Visual Studio Code editor metrics for efficient development environment management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [VSCode Exporter](https://github.com/guicaulada/vscode-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [VSCode Exporter](https://github.com/guicaulada/vscode-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Airthings Waveplus
      link: https://github.com/jeremybz/waveplus_exporter
      icon_filename: airthings.png
      categories:
        - data-collection.iot-devices
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track Waveplus radon sensor metrics for efficient indoor air quality monitoring and management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Waveplus Radon Sensor Exporter](https://github.com/jeremybz/waveplus_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Waveplus Radon Sensor Exporter](https://github.com/jeremybz/waveplus_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Weather
      link: https://github.com/celliott/weather_exporter
      icon_filename: weather.png
      categories:
        - data-collection.hardware-devices-and-sensors
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Export weather metrics from various sources for efficient weather monitoring and forecasting.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Weather exporter](https://github.com/celliott/weather_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Weather exporter](https://github.com/celliott/weather_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Wildfly
      link: https://docs.wildfly.org/18/Admin_Guide.html#MicroProfile_Metrics_SmallRye
      icon_filename: wildfly.png
      categories:
        - data-collection.application-servers
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor WildFly (formerly JBoss AS) Java application server metrics for efficient Java application management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Wildfly Exporter](https://docs.wildfly.org/18/Admin_Guide.html#MicroProfile_Metrics_SmallRye) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Wildfly Exporter](https://docs.wildfly.org/18/Admin_Guide.html#MicroProfile_Metrics_SmallRye) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: XMPP Server
      link: https://github.com/horazont/xmpp-blackbox-exporter
      icon_filename: xmpp.png
      categories:
        - data-collection.message-brokers
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor XMPP (Extensible Messaging and Presence Protocol) server metrics for efficient messaging and communication management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [XMPP Server Exporter](https://github.com/horazont/xmpp-blackbox-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [XMPP Server Exporter](https://github.com/horazont/xmpp-blackbox-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Zeek
      link: https://github.com/zeek/zeek
      icon_filename: zeek.png
      categories:
        - data-collection.apm
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track Zeek (formerly Bro) network security monitoring metrics for efficient network security and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Zeek](https://github.com/zeek/zeek) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Zeek](https://github.com/zeek/zeek) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: 4D Server
      link: https://github.com/ThomasMaul/Prometheus_4D_Exporter
      icon_filename: 4d_server.png
      categories:
        - data-collection.database-servers
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor 4D Server performance metrics for efficient application management and optimization.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [4D Server exporter](https://github.com/ThomasMaul/Prometheus_4D_Exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [4D Server exporter](https://github.com/ThomasMaul/Prometheus_4D_Exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: 8430FT
      link: https://github.com/dernasherbrezon/8430ft_exporter
      icon_filename: 8430ft.png
      categories:
        - data-collection.iot-devices
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep track of vital metrics from the MTS 8430FT modem for streamlined network performance and diagnostics.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [8430FT Exporter](https://github.com/dernasherbrezon/8430ft_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [8430FT Exporter](https://github.com/dernasherbrezon/8430ft_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: A2S
      link: https://github.com/armsnyder/a2s-exporter
      icon_filename: a2s.png
      categories:
        - data-collection.gaming
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Gain insights into Steam A2S-supported game servers for performance and availability through real-time metric monitoring.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [A2S Exporter](https://github.com/armsnyder/a2s-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [A2S Exporter](https://github.com/armsnyder/a2s-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Akamai Edge DNS Traffic
      link: https://github.com/akamai/akamai-edgedns-traffic-exporter
      icon_filename: akamai.png
      categories:
        - data-collection.dns-and-dhcp-servers
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track and analyze Akamai Edge DNS traffic for enhanced performance and security.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Akamai Edge DNS Traffic Exporter](https://github.com/akamai/akamai-edgedns-traffic-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Akamai Edge DNS Traffic Exporter](https://github.com/akamai/akamai-edgedns-traffic-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Akamai Global Traffic Management
      link: https://github.com/akamai/akamai-gtm-metrics-exporter
      icon_filename: akamai.png
      categories:
        - data-collection.cloud-provider-managed
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor vital metrics of Akamai Global Traffic Management (GTM) for optimized load balancing and failover.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Akamai Global Traffic Management Metrics Exporter](https://github.com/akamai/akamai-gtm-metrics-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Akamai Global Traffic Management Metrics Exporter](https://github.com/akamai/akamai-gtm-metrics-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Alamos FE2
      link: https://github.com/codemonauts/prometheus-fe2-exporter
      icon_filename: alamos_fe2.png
      categories:
        - data-collection.apm
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep tabs on Alamos FE2 systems for improved performance and management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Alamos FE2 Exporter](https://github.com/codemonauts/prometheus-fe2-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Alamos FE2 Exporter](https://github.com/codemonauts/prometheus-fe2-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Altaro Backup
      link: https://github.com/raph2i/altaro_backup_exporter
      icon_filename: altaro.png
      categories:
        - data-collection.storage-mount-points-and-filesystems
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track Altaro Backup performance metrics to ensure smooth data protection and recovery operations.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Altaro Backup Exporter](https://github.com/raph2i/altaro_backup_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Altaro Backup Exporter](https://github.com/raph2i/altaro_backup_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: AMD SMI
      link: https://github.com/amd/amd_smi_exporter
      icon_filename: amd.png
      categories:
        - data-collection.hardware-devices-and-sensors
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor AMD System Management Interface performance for optimized hardware management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [AMD SMI Exporter](https://github.com/amd/amd_smi_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [AMD SMI Exporter](https://github.com/amd/amd_smi_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Andrews & Arnold line status
      link: https://github.com/daveio/aaisp-exporter
      icon_filename: andrews-and-arnold.png
      categories:
        - data-collection.networking-stack-and-network-interfaces
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track Andrews & Arnold Ltd (AAISP) metrics for improved network performance and diagnostics.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Andrews & Arnold line status exporter](https://github.com/daveio/aaisp-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Andrews & Arnold line status exporter](https://github.com/daveio/aaisp-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: APIcast
      link: https://github.com/3scale/apicast
      icon_filename: apicast.png
      categories:
        - data-collection.api-gateways
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor APIcast performance metrics to optimize API gateway operations and management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [APIcast](https://github.com/3scale/apicast) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [APIcast](https://github.com/3scale/apicast) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Apple Time Machine
      link: https://github.com/znerol/prometheus-timemachine-exporter
      icon_filename: apple.png
      categories:
        - data-collection.macos-systems
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track Apple Time Machine backup metrics for efficient data protection and recovery.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Apple Time Machine Exporter](https://github.com/znerol/prometheus-timemachine-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Apple Time Machine Exporter](https://github.com/znerol/prometheus-timemachine-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: ArangoDB
      link: https://gitlab.com/flare/arangodb-exporter
      icon_filename: arangodb.png
      categories:
        - data-collection.database-servers
    keywords:
      - database
      - dbms
      - data storage
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor ArangoDB performance metrics for optimized database management and query performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [ArangoDB Exporter](https://gitlab.com/flare/arangodb-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [ArangoDB Exporter](https://gitlab.com/flare/arangodb-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: ARM HWCPipe
      link: https://github.com/ylz-at/arm-hwcpipe-exporter
      icon_filename: arm.png
      categories:
        - data-collection.hardware-devices-and-sensors
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep track of ARM running Android devices and get metrics for efficient performance optimization.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [ARM HWCPipe Exporter](https://github.com/ylz-at/arm-hwcpipe-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [ARM HWCPipe Exporter](https://github.com/ylz-at/arm-hwcpipe-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: ArvanCloud
      link: https://github.com/arvancloud/ar-prometheus-exporter
      icon_filename: arvancloud.png
      categories:
        - data-collection.cloud-provider-managed
    keywords:
      - cloud services
      - cloud computing
      - scalability
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track and analyze ArvanCloud CDN and cloud services performance metrics for optimized delivery and management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [ArvanCloud exporter](https://github.com/arvancloud/ar-prometheus-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [ArvanCloud exporter](https://github.com/arvancloud/ar-prometheus-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Audisto
      link: https://github.com/ZeitOnline/audisto_exporter
      icon_filename: audisto.png
      categories:
        - data-collection.apm
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Audisto SEO and website metrics for improved search performance and optimization.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Audisto exporter](https://github.com/ZeitOnline/audisto_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Audisto exporter](https://github.com/ZeitOnline/audisto_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Authelia
      link: https://www.authelia.com/reference/guides/metrics/#prometheus
      icon_filename: authelia.png
      categories:
        - data-collection.authentication-and-authorization
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep tabs on Authelia authentication and authorization metrics for enhanced security and user management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Authelia](https://www.authelia.com/reference/guides/metrics/#prometheus) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Authelia](https://www.authelia.com/reference/guides/metrics/#prometheus) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: AuthLog
      link: https://github.com/woblerr/authlog_exporter
      icon_filename: linux.png
      categories:
        - data-collection.logs-servers
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor authentication logs for security insights and efficient access management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [AuthLog Exporter](https://github.com/woblerr/authlog_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [AuthLog Exporter](https://github.com/woblerr/authlog_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: AWS EC2 Spot
      link: https://github.com/patcadelina/ec2-spot-exporter
      icon_filename: aws-ec2.png
      categories:
        - data-collection.cloud-provider-managed
    keywords:
      - cloud services
      - cloud computing
      - aws services
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor AWS EC2 Spot instances'' performance metrics for efficient resource allocation and cost optimization.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [AWS EC2 Spot Exporter](https://github.com/patcadelina/ec2-spot-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [AWS EC2 Spot Exporter](https://github.com/patcadelina/ec2-spot-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: AWS Subnet
      link: https://github.com/xrstf/aws_exporter
      icon_filename: aws.png
      categories:
        - data-collection.cloud-provider-managed
    keywords:
      - cloud services
      - cloud computing
      - aws services
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep an eye on AWS subnet metrics for optimized network performance and resource allocation.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [AWS Subnet Exporter](https://github.com/xrstf/aws_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [AWS Subnet Exporter](https://github.com/xrstf/aws_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: aws_quota_
      link: https://github.com/emylincon/aws_quota_exporter
      icon_filename: aws.png
      categories:
        - data-collection.cloud-provider-managed
    keywords:
      - cloud services
      - cloud computing
      - aws services
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor AWS service quotas for effective resource usage and cost management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [aws_quota_exporter](https://github.com/emylincon/aws_quota_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [aws_quota_exporter](https://github.com/emylincon/aws_quota_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Bird Routing Daemon
      link: https://github.com/czerwonk/bird_exporter
      icon_filename: bird.png
      categories:
        - data-collection.networking-stack-and-network-interfaces
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep an eye on Bird Routing Daemon metrics for optimized network routing and management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Bird Routing Daemon Exporter](https://github.com/czerwonk/bird_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Bird Routing Daemon Exporter](https://github.com/czerwonk/bird_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: BladePSGI
      link: https://github.com/johto/BladePSGI_exporter
      icon_filename: psgi.png
      categories:
        - data-collection.apm
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor BladePSGI application metrics for improved performance and resource management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [BladePSGI exporter](https://github.com/johto/BladePSGI_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [BladePSGI exporter](https://github.com/johto/BladePSGI_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Bloomsky
      link: https://github.com/krazylek/bloomsky-prometheus-exporter
      icon_filename: bloomsky.png
      categories:
        - data-collection.hardware-devices-and-sensors
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep tabs on Bloomsky weather data for comprehensive environmental monitoring and analysis.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Bloomsky exporter](https://github.com/krazylek/bloomsky-prometheus-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Bloomsky exporter](https://github.com/krazylek/bloomsky-prometheus-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Bobcat
      link: https://github.com/pperzyna/bobcat_exporter
      icon_filename: bobber.png
      categories:
        - data-collection.iot-devices
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Bobcat equipment metrics for optimized performance and maintenance management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Bobcat Exporter](https://github.com/pperzyna/bobcat_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Bobcat Exporter](https://github.com/pperzyna/bobcat_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: BorgBase
      link: https://git.sr.ht/~tomleb/borgbase-exporter
      icon_filename: borg.png
      categories:
        - data-collection.storage-mount-points-and-filesystems
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor BorgBase repository metrics for optimized backup management and storage efficiency.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [BorgBase exporter](https://git.sr.ht/~tomleb/borgbase-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [BorgBase exporter](https://git.sr.ht/~tomleb/borgbase-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: BOSH
      link: https://github.com/bosh-prometheus/bosh_exporter
      icon_filename: bosh.png
      categories:
        - data-collection.cloud-provider-managed
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep an eye on BOSH deployment metrics for improved cloud orchestration and resource management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [BOSH exporter](https://github.com/bosh-prometheus/bosh_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [BOSH exporter](https://github.com/bosh-prometheus/bosh_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: bpftrace
      link: https://github.com/andreasgerstmayr/bpftrace_exporter
      icon_filename: bpftrace.png
      categories:
        - data-collection.apm
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track bpftrace metrics for advanced performance analysis and troubleshooting.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [bpftrace exporter](https://github.com/andreasgerstmayr/bpftrace_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [bpftrace exporter](https://github.com/andreasgerstmayr/bpftrace_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Buildkite
      link: https://github.com/smithamax/buildkite_exporter
      icon_filename: buildkite.png
      categories:
        - data-collection.apm
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Buildkite CI/CD pipeline metrics for optimized workflow management and deployment.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Buildkite Exporter](https://github.com/smithamax/buildkite_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Buildkite Exporter](https://github.com/smithamax/buildkite_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: BungeeCord
      link: https://github.com/weihao/bungeecord-prometheus-exporter
      icon_filename: bungee.png
      categories:
        - data-collection.gaming
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track BungeeCord proxy server metrics for efficient load balancing and performance management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [BungeeCord Prometheus Exporter](https://github.com/weihao/bungeecord-prometheus-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [BungeeCord Prometheus Exporter](https://github.com/weihao/bungeecord-prometheus-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Butler (Qlik Sense DevOps toolbox)
      link: https://github.com/ptarmiganlabs/butler
      icon_filename: butler.png
      categories:
        - data-collection.apm
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Butler Qlik Sense DevOps metrics for efficient development and operations management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Butler (Qlik Sense DevOps toolbox) Exporter. WIP](https://github.com/ptarmiganlabs/butler) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Butler (Qlik Sense DevOps toolbox) Exporter. WIP](https://github.com/ptarmiganlabs/butler) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Butler CW (Qlik Sense cache warming tool)
      link: https://github.com/ptarmiganlabs/butler-cw
      icon_filename: butler-cw.png
      categories:
        - data-collection.apm
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep tabs on Butler CW Qlik Sense cache warming metrics for optimized data access and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Butler CW (Qlik Sense cache warming tool) Exporter. WIP](https://github.com/ptarmiganlabs/butler-cw) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Butler CW (Qlik Sense cache warming tool) Exporter. WIP](https://github.com/ptarmiganlabs/butler-cw) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Butler SOS (Qlik Sense monitoring tool)
      link: https://github.com/ptarmiganlabs/butler-sos
      icon_filename: butler-sos.png
      categories:
        - data-collection.apm
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Butler SOS Qlik Sense metrics for comprehensive performance analysis and management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Butler SOS (Qlik Sense monitoring tool) Exporter](https://github.com/ptarmiganlabs/butler-sos) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Butler SOS (Qlik Sense monitoring tool) Exporter](https://github.com/ptarmiganlabs/butler-sos) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: c-lightning
      link: https://github.com/lightningd/plugins/tree/master/prometheus
      icon_filename: lightning.png
      categories:
        - data-collection.blockchain-servers
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track c-lightning metrics for optimized Lightning Network management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [c-lightning prometheus exporter](https://github.com/lightningd/plugins/tree/master/prometheus) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [c-lightning prometheus exporter](https://github.com/lightningd/plugins/tree/master/prometheus) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Celery
      link: https://github.com/ZeitOnline/celery_redis_prometheus
      icon_filename: celery.png
      categories:
        - data-collection.task-queues
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep an eye on Celery task queue metrics for optimized task processing and resource management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Celery Exporter](https://github.com/ZeitOnline/celery_redis_prometheus) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Celery Exporter](https://github.com/ZeitOnline/celery_redis_prometheus) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Centrifugo
      link: https://github.com/nordicdyno/centrifugo_exporter
      icon_filename: centrifugo.png
      categories:
        - data-collection.message-brokers
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Centrifugo real-time messaging server metrics for efficient communication and performance management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Centrifugo Exporter](https://github.com/nordicdyno/centrifugo_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Centrifugo Exporter](https://github.com/nordicdyno/centrifugo_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Checkpoint
      link: https://github.com/RespiroConsulting/CheckPointExporter
      icon_filename: checkpoint.png
      categories:
        - data-collection.networking-stack-and-network-interfaces
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track Check Point firewall and security metrics for enhanced network protection and management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Checkpoint exporter](https://github.com/RespiroConsulting/CheckPointExporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Checkpoint exporter](https://github.com/RespiroConsulting/CheckPointExporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Chef Compliance
      link: https://github.com/contino/chef_compliance_exporter
      icon_filename: chef.png
      categories:
        - data-collection.authentication-and-authorization
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Chef Compliance metrics for efficient infrastructure and security management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Chef Compliance exporter](https://github.com/contino/chef_compliance_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Chef Compliance exporter](https://github.com/contino/chef_compliance_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Chia
      link: https://github.com/chia-network/chia-exporter
      icon_filename: chia.png
      categories:
        - data-collection.blockchain-servers
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track Chia blockchain metrics for optimized farming and resource allocation.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Chia Exporter](https://github.com/chia-network/chia-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Chia Exporter](https://github.com/chia-network/chia-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Christ Elektronik CLM5IP
      link: https://github.com/christmann/clm5ip_exporter/
      icon_filename: christelec.png
      categories:
        - data-collection.iot-devices
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Christ Elektronik CLM5IP device metrics for efficient performance and diagnostics.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Christ Elektronik CLM5IP Exporter](https://github.com/christmann/clm5ip_exporter/) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Christ Elektronik CLM5IP Exporter](https://github.com/christmann/clm5ip_exporter/) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: ClamAV daemon stats
      link: https://github.com/sergeymakinen/clamav_exporter
      icon_filename: clamav.png
      categories:
        - data-collection.apm
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track ClamAV antivirus metrics for enhanced threat detection and management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [ClamAV daemon stats exporter](https://github.com/sergeymakinen/clamav_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [ClamAV daemon stats exporter](https://github.com/sergeymakinen/clamav_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: clamscan-
      link: https://github.com/FortnoxAB/clamscan-exporter
      icon_filename: clamav.png
      categories:
        - data-collection.apm
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor ClamAV scanning performance metrics for efficient malware detection and analysis.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [clamscan-exporter](https://github.com/FortnoxAB/clamscan-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [clamscan-exporter](https://github.com/FortnoxAB/clamscan-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Clash
      link: https://github.com/elonzh/clash_exporter
      icon_filename: clash.png
      categories:
        - data-collection.web-servers-and-web-proxies
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep an eye on Clash proxy server metrics for optimized network performance and management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Clash exporter](https://github.com/elonzh/clash_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Clash exporter](https://github.com/elonzh/clash_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Cloud Foundry
      link: https://github.com/bosh-prometheus/cf_exporter
      icon_filename: cloud-foundry.png
      categories:
        - data-collection.cloud-provider-managed
    keywords:
      - cloud services
      - cloud computing
      - scalability
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track Cloud Foundry platform metrics for optimized application deployment and management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Cloud Foundry exporter](https://github.com/bosh-prometheus/cf_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Cloud Foundry exporter](https://github.com/bosh-prometheus/cf_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Cloud Foundry Firehose
      link: https://github.com/bosh-prometheus/firehose_exporter
      icon_filename: cloud-foundry.png
      categories:
        - data-collection.cloud-provider-managed
    keywords:
      - cloud services
      - cloud computing
      - scalability
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Cloud Foundry Firehose metrics for comprehensive platform diagnostics and management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Cloud Foundry Firehose exporter](https://github.com/bosh-prometheus/firehose_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Cloud Foundry Firehose exporter](https://github.com/bosh-prometheus/firehose_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Cloudmonitor
      link: https://github.com/ExpressenAB/cloudmonitor_exporter
      icon_filename: akamai.png
      categories:
        - data-collection.cloud-provider-managed
    keywords:
      - cloud services
      - cloud computing
      - scalability
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Akamai cloudmonitor provider metrics for comprehensive cloud performance management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Cloudmonitor exporter](https://github.com/ExpressenAB/cloudmonitor_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Cloudmonitor exporter](https://github.com/ExpressenAB/cloudmonitor_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Cloudprober
      link: https://github.com/cloudprober/cloudprober
      icon_filename: cloudprober.png
      categories:
        - data-collection.synthetic-checks
    keywords:
      - cloud services
      - cloud computing
      - scalability
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep an eye on cloud service availability and latency with Cloudprober monitoring.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Cloudprober Exporter](https://github.com/cloudprober/cloudprober) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Cloudprober Exporter](https://github.com/cloudprober/cloudprober) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Cluster
      link: https://github.com/GSI-HPC/prometheus-cluster-exporter
      icon_filename: lustre.png
      categories:
        - data-collection.cloud-provider-managed
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep tabs on Lustre clustered file system for efficient management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Cluster Exporter](https://github.com/GSI-HPC/prometheus-cluster-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Cluster Exporter](https://github.com/GSI-HPC/prometheus-cluster-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: CMON
      link: https://github.com/severalnines/cmon_exporter
      icon_filename: severalnines.png
      categories:
        - data-collection.database-servers
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track CMON metrics for Severalnines Cluster Control for efficient monitoring and management of database operations.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [CMON Exporter](https://github.com/severalnines/cmon_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [CMON Exporter](https://github.com/severalnines/cmon_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Collectd
      link: https://github.com/prometheus/collectd_exporter
      icon_filename: collectd.png
      categories:
        - data-collection.generic-data-collection
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor system and application metrics with Collectd for comprehensive performance analysis.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Collectd exporter](https://github.com/prometheus/collectd_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Collectd exporter](https://github.com/prometheus/collectd_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Collins
      link: https://github.com/soundcloud/collins_exporter
      icon_filename: collins.png
      categories:
        - data-collection.provisioning-systems
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep an eye on Collins infrastructure management metrics for efficient hardware and asset management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Collins exporter](https://github.com/soundcloud/collins_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Collins exporter](https://github.com/soundcloud/collins_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: COMAP
      link: https://gitlab.com/sre-gems/comap
      icon_filename: comap.png
      categories:
        - data-collection.generic-data-collection
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor COMAP control system metrics for optimized performance and diagnostics.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [COMAP](https://gitlab.com/sre-gems/comap) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [COMAP](https://gitlab.com/sre-gems/comap) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Command runner
      link: https://github.com/tomwilkie/prom-run
      icon_filename: crunner.png
      categories:
        - data-collection.generic-data-collection
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track custom command output metrics for tailored monitoring and management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Command runner exporter](https://github.com/tomwilkie/prom-run) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Command runner exporter](https://github.com/tomwilkie/prom-run) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Connection Status
      link: https://github.com/daviddetorres/connection-status-exporter
      icon_filename: cstatus.png
      categories:
        - data-collection.networking-stack-and-network-interfaces
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep tabs on network connection status metrics for efficient connectivity management and troubleshooting.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Connection Status Exporter](https://github.com/daviddetorres/connection-status-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Connection Status Exporter](https://github.com/daviddetorres/connection-status-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: consrv
      link: https://github.com/mdlayher/consrv
      icon_filename: consrv.png
      categories:
        - data-collection.generic-data-collection
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track serial console bridge server metrics for optimized service discovery and health management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [consrv](https://github.com/mdlayher/consrv) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [consrv](https://github.com/mdlayher/consrv) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: CoreRAD
      link: https://github.com/mdlayher/corerad
      icon_filename: corerad.png
      categories:
        - data-collection.dns-and-dhcp-servers
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor CoreRAD IPv6 router advertisement daemon metrics for efficient network management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [CoreRAD](https://github.com/mdlayher/corerad) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [CoreRAD](https://github.com/mdlayher/corerad) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: CraftBeerPi
      link: https://github.com/jo-hannes/craftbeerpi_exporter
      icon_filename: craftbeer.png
      categories:
        - data-collection.iot-devices
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep an eye on CraftBeerPi homebrewing metrics for optimized brewing process management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [CraftBeerPi exporter](https://github.com/jo-hannes/craftbeerpi_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [CraftBeerPi exporter](https://github.com/jo-hannes/craftbeerpi_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: CrateDB remote remote read/write adapter
      link: https://github.com/crate/cratedb-prometheus-adapter
      icon_filename: cratedb.png
      categories:
        - data-collection.database-servers
    keywords:
      - database
      - dbms
      - data storage
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track CrateDB metrics for efficient data storage and query performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [CrateDB remote remote read/write adapter](https://github.com/crate/cratedb-prometheus-adapter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [CrateDB remote remote read/write adapter](https://github.com/crate/cratedb-prometheus-adapter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Crypto
      link: https://github.com/ix-ai/crypto-exporter
      icon_filename: crypto.png
      categories:
        - data-collection.blockchain-servers
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track cryptocurrency market metrics for informed investment and trading decisions.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Crypto exporter](https://github.com/ix-ai/crypto-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Crypto exporter](https://github.com/ix-ai/crypto-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Crypto Miner
      link: https://github.com/bugroger/miner-exporter
      icon_filename: crypto.png
      categories:
        - data-collection.blockchain-servers
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor cryptocurrency mining metrics for optimized resource allocation and profitability.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Crypto Miner exporter](https://github.com/bugroger/miner-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Crypto Miner exporter](https://github.com/bugroger/miner-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Cryptowatch
      link: https://github.com/nbarrientos/cryptowat_exporter
      icon_filename: cryptowatch.png
      categories:
        - data-collection.blockchain-servers
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep tabs on Cryptowatch market data metrics for comprehensive cryptocurrency market analysis.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Cryptowat Exporter](https://github.com/nbarrientos/cryptowat_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Cryptowat Exporter](https://github.com/nbarrientos/cryptowat_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: CS:GO
      link: https://github.com/kinduff/csgo_exporter
      icon_filename: csgo.png
      categories:
        - data-collection.gaming
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Counter-Strike: Global Offensive server metrics for improved game performance and management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [CS:GO Exporter](https://github.com/kinduff/csgo_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [CS:GO Exporter](https://github.com/kinduff/csgo_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: certificate transparency
      link: https://github.com/Hsn723/ct-exporter
      icon_filename: ct.png
      categories:
        - data-collection.security-systems
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track certificate transparency log metrics for enhanced
        SSL/TLS certificate management and security.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [ct-exporter](https://github.com/Hsn723/ct-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [ct-exporter](https://github.com/Hsn723/ct-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: CTDB
      link: https://github.com/prometheus/prometheus/wiki/Default-port-allocations
      icon_filename: ctdb.png
      categories:
        - data-collection.database-servers
    keywords:
      - database
      - dbms
      - data storage
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor CTDB metrics for efficient clustered file system management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [CTDB Exporter](https://github.com/prometheus/prometheus/wiki/Default-port-allocations) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [CTDB Exporter](https://github.com/prometheus/prometheus/wiki/Default-port-allocations) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Custom Exporter
      link: https://github.com/orange-cloudfoundry/custom_exporter
      icon_filename: customdata.png
      categories:
        - data-collection.generic-data-collection
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Create and monitor custom metrics tailored to your specific use case and requirements.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Custom Exporter](https://github.com/orange-cloudfoundry/custom_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Custom Exporter](https://github.com/orange-cloudfoundry/custom_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: CVMFS
      link: https://github.com/guilbaults/cvmfs-exporter
      icon_filename: cvmfs.png
      categories:
        - data-collection.storage-mount-points-and-filesystems
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track CernVM File System metrics for optimized distributed file system performance and management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [CVMFS exporter](https://github.com/guilbaults/cvmfs-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [CVMFS exporter](https://github.com/guilbaults/cvmfs-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: SQL Queries (oracle/postgres/mssql/mysql queries)
      link: https://github.com/Corundex/database_exporter
      icon_filename: dbexport.png
      categories:
        - data-collection.database-servers
    keywords:
      - database
      - relational db
      - data querying
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor various database systems like Oracle, PostgreSQL,
        MSSQL, and MySQL using SQL queries for comprehensive database performance management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Database exporter (oracle/postgres/mssql/mysql sql queries)](https://github.com/Corundex/database_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Database exporter (oracle/postgres/mssql/mysql sql queries)](https://github.com/Corundex/database_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: ddwrt-collector
      link: https://github.com/camelusferus/ddwrt_collector
      icon_filename: ddwrt.png
      categories:
        - data-collection.networking-stack-and-network-interfaces
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep tabs on DD-WRT router metrics for efficient network management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [ddwrt-collector](https://github.com/camelusferus/ddwrt_collector) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [ddwrt-collector](https://github.com/camelusferus/ddwrt_collector) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Dell/EMC XtremIO
      link: https://github.com/cthiel42/prometheus-xtremio-exporter
      icon_filename: dell-emc.png
      categories:
        - data-collection.storage-mount-points-and-filesystems
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep an eye on Dell/EMC XtremIO storage metrics for optimized data management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Dell/EMC XtremIO Exporter](https://github.com/cthiel42/prometheus-xtremio-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Dell/EMC XtremIO Exporter](https://github.com/cthiel42/prometheus-xtremio-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Dependency-Track
      link: https://github.com/jetstack/dependency-track-exporter
      icon_filename: dependency-track.png
      categories:
        - data-collection.apm
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Dependency-Track metrics for efficient vulnerability management and software supply chain analysis.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Dependency-Track Exporter](https://github.com/jetstack/dependency-track-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Dependency-Track Exporter](https://github.com/jetstack/dependency-track-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Disk usage
      link: https://github.com/dundee/disk_usage_exporter
      icon_filename: du.png
      categories:
        - data-collection.storage-mount-points-and-filesystems
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep tabs on disk usage metrics for efficient storage management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Disk usage exporter and NUT exporter](https://github.com/dundee/disk_usage_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Disk usage exporter and NUT exporter](https://github.com/dundee/disk_usage_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: DMARC
      link: https://github.com/jgosmann/dmarc-metrics-exporter
      icon_filename: dmarc.png
      categories:
        - data-collection.mail-servers
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track DMARC email authentication metrics for improved email security and deliverability.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [dmarc-metrics-exporter](https://github.com/jgosmann/dmarc-metrics-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [dmarc-metrics-exporter](https://github.com/jgosmann/dmarc-metrics-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: dnsbl
      link: https://github.com/Luzilla/dnsbl_exporter/
      icon_filename: dns.png
      categories:
        - data-collection.dns-and-dhcp-servers
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor DNSBL metrics for efficient domain reputation and security management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [dnsbl-exporter](https://github.com/Luzilla/dnsbl_exporter/) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [dnsbl-exporter](https://github.com/Luzilla/dnsbl_exporter/) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Domain
      link: https://github.com/shift/domain_exporter
      icon_filename: dns.png
      categories:
        - data-collection.dns-and-dhcp-servers
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep an eye on domain-specific metrics for optimized web presence and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Domain Exporter](https://github.com/shift/domain_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Domain Exporter](https://github.com/shift/domain_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: DRBD  via drbd-reactor
      link: https://github.com/LINBIT/drbd-reactor
      icon_filename: drbd.png
      categories:
        - data-collection.storage-mount-points-and-filesystems
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track DRBD metrics for efficient distributed replicated block device management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [DRBD exporter via drbd-reactor](https://github.com/LINBIT/drbd-reactor) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [DRBD exporter via drbd-reactor](https://github.com/LINBIT/drbd-reactor) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Elgato Key Light
      link: https://github.com/mdlayher/keylight_exporter
      icon_filename: elgato.png
      categories:
        - data-collection.iot-devices
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep tabs on Elgato Key Light metrics for optimized lighting control and management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Elgato Key Light exporter](https://github.com/mdlayher/keylight_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Elgato Key Light exporter](https://github.com/mdlayher/keylight_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: energomera- Energomera's electricity meter
      link: https://github.com/peak-load/energomera_exporter
      icon_filename: energomera.png
      categories:
        - data-collection.iot-devices
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track Energomera electricity meter metrics for efficient energy management and monitoring.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [energomera-exporter Energomera electricity meter exporter](https://github.com/peak-load/energomera_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [energomera-exporter Energomera electricity meter exporter](https://github.com/peak-load/energomera_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Ethtool
      link: https://github.com/adeverteuil/ethtool_exporter
      icon_filename: eth.png
      categories:
        - data-collection.hardware-devices-and-sensors
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep an eye on network interface metrics using Ethtool for optimized network performance and management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Ethtool Exporter](https://github.com/adeverteuil/ethtool_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Ethtool Exporter](https://github.com/adeverteuil/ethtool_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Excel
      link: https://github.com/MarcusCalidus/excel-exporter
      icon_filename: excel.png
      categories:
        - data-collection.generic-data-collection
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Export Prometheus metrics to Excel for versatile data analysis and reporting.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Excel Exporter](https://github.com/MarcusCalidus/excel-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Excel Exporter](https://github.com/MarcusCalidus/excel-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Falco
      link: https://github.com/falcosecurity/falco
      icon_filename: falco.png
      categories:
        - data-collection.security-systems
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track Falco security metrics for efficient runtime security management and threat detection.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Falco](https://github.com/falcosecurity/falco) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Falco](https://github.com/falcosecurity/falco) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Fastd
      link: https://github.com/freifunk-darmstadt/fastd-exporter
      icon_filename: fastd.png
      categories:
        - data-collection.networking-stack-and-network-interfaces
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Fastd VPN metrics for efficient virtual private network management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Fastd Exporter](https://github.com/freifunk-darmstadt/fastd-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Fastd Exporter](https://github.com/freifunk-darmstadt/fastd-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: FastNetMon Advanced
      link: https://fastnetmon.com/docs-fnm-advanced/
      icon_filename: fastnetmon.png
      categories:
        - data-collection.networking-stack-and-network-interfaces
    keywords:
      - network monitoring
      - network performance
      - traffic analysis
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep tabs on FastNetMon Advanced network monitoring metrics for efficient traffic analysis and DDoS detection.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [FastNetMon Advanced exporter](https://fastnetmon.com/docs-fnm-advanced/) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [FastNetMon Advanced exporter](https://fastnetmon.com/docs-fnm-advanced/) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Faucet SDN Faucet
      link: https://github.com/faucetsdn/faucet
      icon_filename: faucet.png
      categories:
        - data-collection.networking-stack-and-network-interfaces
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Faucet software-defined networking metrics for efficient network management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Faucet SDN Faucet Exporter](https://github.com/faucetsdn/faucet) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Faucet SDN Faucet Exporter](https://github.com/faucetsdn/faucet) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Fawkes
      link: https://github.com/fawkesrobotics/fawkes
      icon_filename: fawkes.png
      categories:
        - data-collection.generic-data-collection
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track Fawkes Robotic Real-Time Applications metrics for enhanced monitoring.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Fawkes](https://github.com/fawkesrobotics/fawkes) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Fawkes](https://github.com/fawkesrobotics/fawkes) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Flussonic
      link: https://github.com/vsperson/flussonic-exporter
      icon_filename: flussonic.png
      categories:
        - data-collection.media-streaming-servers
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track Flussonic media server metrics for optimized streaming and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Flussonic exporter](https://github.com/vsperson/flussonic-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Flussonic exporter](https://github.com/vsperson/flussonic-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Folding@home
      link: https://github.com/jtai/foldingathome_exporter
      icon_filename: foldingathome.png
      categories:
        - data-collection.p2p
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Folding@home distributed computing metrics for efficient resource management and scientific research performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Folding@home Exporter](https://github.com/jtai/foldingathome_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Folding@home Exporter](https://github.com/jtai/foldingathome_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: FreeSWITCH
      link: https://github.com/friends-of-freeswitch/mod_prometheus
      icon_filename: freeswitch.png
      categories:
        - data-collection.telephony-servers
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor FreeSWITCH telephony platform metrics for efficient communication management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [FreeSWITCH Exporter](https://github.com/friends-of-freeswitch/mod_prometheus) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [FreeSWITCH Exporter](https://github.com/friends-of-freeswitch/mod_prometheus) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Freifunk
      link: https://github.com/xperimental/freifunk-exporter
      icon_filename: freifunk.png
      categories:
        - data-collection.networking-stack-and-network-interfaces
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep tabs on Freifunk community network metrics for optimized network performance and management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Freifunk Exporter](https://github.com/xperimental/freifunk-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Freifunk Exporter](https://github.com/xperimental/freifunk-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Fritzbox
      link: https://github.com/pdreker/fritz_exporter
      icon_filename: avm.png
      categories:
        - data-collection.networking-stack-and-network-interfaces
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track AVM Fritzbox router metrics for efficient home network management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Fritzbox exporter](https://github.com/pdreker/fritz_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Fritzbox exporter](https://github.com/pdreker/fritz_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: FRRouting
      link: https://github.com/tynany/frr_exporter
      icon_filename: frrouting.png
      categories:
        - data-collection.networking-stack-and-network-interfaces
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Free Range Routing  (FRR) metrics for optimized network routing and management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [FRRouting Exporter](https://github.com/tynany/frr_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [FRRouting Exporter](https://github.com/tynany/frr_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Generic Command Line Output
      link: https://github.com/MarioMartReq/generic-exporter
      icon_filename: cli.jpeg
      categories:
        - data-collection.generic-data-collection
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track custom command line output metrics for tailored monitoring and management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Generic Command Line Output Exporter](https://github.com/MarioMartReq/generic-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Generic Command Line Output Exporter](https://github.com/MarioMartReq/generic-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Generic
      link: https://github.com/klau2005/prometheus_generic_exporter
      icon_filename: customdata.png
      categories:
        - data-collection.generic-data-collection
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Create and monitor custom metrics tailored to your specific use case and requirements.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Generic Exporter](https://github.com/klau2005/prometheus_generic_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Generic Exporter](https://github.com/klau2005/prometheus_generic_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: GitHub API rate limit
      link: https://github.com/lunarway/github-ratelimit-exporter
      icon_filename: github.png
      categories:
        - data-collection.generic-data-collection
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor GitHub API rate limit metrics for efficient
        API usage and management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [GitHub API rate limit Exporter](https://github.com/lunarway/github-ratelimit-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [GitHub API rate limit Exporter](https://github.com/lunarway/github-ratelimit-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: gitlab-pages
      link: https://gitlab.com/gitlab-org/gitlab-pages/
      icon_filename: gitlab.png
      categories:
        - data-collection.apm
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track GitLab Pages metrics for optimized static site hosting and management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [gitlab-pages exporter](https://gitlab.com/gitlab-org/gitlab-pages/) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [gitlab-pages exporter](https://gitlab.com/gitlab-org/gitlab-pages/) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: gitlab-workhorse
      link: https://gitlab.com/gitlab-org/gitlab-workhorse
      icon_filename: gitlab.png
      categories:
        - data-collection.apm
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor GitLab Workhorse metrics for efficient web server and reverse proxy management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [gitlab-workhorse](https://gitlab.com/gitlab-org/gitlab-workhorse) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [gitlab-workhorse](https://gitlab.com/gitlab-org/gitlab-workhorse) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: GlusterFS
      link: https://github.com/gluster/gluster-prometheus
      icon_filename: gluster.png
      categories:
        - data-collection.storage-mount-points-and-filesystems
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep tabs on GlusterFS distributed file system metrics for optimized storage management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [GlusterFS Exporter](https://github.com/gluster/gluster-prometheus) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [GlusterFS Exporter](https://github.com/gluster/gluster-prometheus) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Google Cloud Status Dashboard
      link: https://github.com/DazWilkin/gcp-status
      icon_filename: gcp.png
      categories:
        - data-collection.cloud-provider-managed
    keywords:
      - cloud services
      - cloud computing
      - scalability
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep an eye on Google Cloud status metrics for efficient service availability management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Google Cloud Status Dashboard exporter](https://github.com/DazWilkin/gcp-status) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Google Cloud Status Dashboard exporter](https://github.com/DazWilkin/gcp-status) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: gpsd
      link: https://github.com/natesales/gpsd-exporter
      icon_filename: gpsd.png
      categories:
        - data-collection.networking-stack-and-network-interfaces
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor GPSD (GPS daemon) metrics for efficient GPS data management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [gpsd exporter](https://github.com/natesales/gpsd-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [gpsd exporter](https://github.com/natesales/gpsd-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: GTP
      link: https://github.com/wmnsk/gtp_exporter
      icon_filename: gtpu.png
      categories:
        - data-collection.telephony-servers
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep an eye on GTP (GPRS Tunneling Protocol) metrics for optimized mobile data communication and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [GTP Exporter](https://github.com/wmnsk/gtp_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [GTP Exporter](https://github.com/wmnsk/gtp_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Halon
      link: https://github.com/tobiasbp/halon_exporter
      icon_filename: halon.png
      categories:
        - data-collection.mail-servers
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Halon email security and delivery metrics for optimized email management and protection.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Halon exporter](https://github.com/tobiasbp/halon_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Halon exporter](https://github.com/tobiasbp/halon_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: haraka
      link: https://github.com/mailprotector/haraka-plugin-prometheus
      icon_filename: haraka.png
      categories:
        - data-collection.mail-servers
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Haraka SMTP server metrics for efficient email delivery and security management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [haraka exporter](https://github.com/mailprotector/haraka-plugin-prometheus) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [haraka exporter](https://github.com/mailprotector/haraka-plugin-prometheus) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Hasura
      link: https://github.com/zolamk/hasura-exporter
      icon_filename: hasura.png
      categories:
        - data-collection.database-servers
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep tabs on Hasura GraphQL engine metrics for optimized
        API performance and management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Hasura Exporter](https://github.com/zolamk/hasura-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Hasura Exporter](https://github.com/zolamk/hasura-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: HDSentinel
      link: https://github.com/qusielle/hdsentinel-exporter
      icon_filename: hdsentinel.png
      categories:
        - data-collection.storage-mount-points-and-filesystems
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Hard Disk Sentinel metrics for efficient storage device health management and diagnostics.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [HDSentinel Exporter](https://github.com/qusielle/hdsentinel-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [HDSentinel Exporter](https://github.com/qusielle/hdsentinel-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Helium hotspot
      link: https://github.com/tedder/helium_hotspot_exporter
      icon_filename: helium.png
      categories:
        - data-collection.iot-devices
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track Helium hotspot metrics for optimized LoRaWAN network management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Helium hotspot exporter](https://github.com/tedder/helium_hotspot_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Helium hotspot exporter](https://github.com/tedder/helium_hotspot_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Helium miner (validator)
      link: https://github.com/tedder/miner_exporter
      icon_filename: helium.png
      categories:
        - data-collection.iot-devices
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Helium miner and validator metrics for efficient blockchain performance and management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Helium miner (validator) exporter](https://github.com/tedder/miner_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Helium miner (validator) exporter](https://github.com/tedder/miner_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Hetzner Cloud CSI Driver (Nodes)
      link: https://github.com/hetznercloud/csi-driver
      icon_filename: hetznercloud.png
      categories:
        - data-collection.cloud-provider-managed
    keywords:
      - cloud services
      - cloud computing
      - scalability
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track Hetzner Cloud Container Storage Interface driver metrics for efficient Kubernetes storage management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Hetzner Cloud CSI Driver (Nodes)](https://github.com/hetznercloud/csi-driver) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Hetzner Cloud CSI Driver (Nodes)](https://github.com/hetznercloud/csi-driver) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: HHVM
      link: https://github.com/wikimedia/operations-software-hhvm_exporter
      icon_filename: hhvm.png
      categories:
        - data-collection.web-servers-and-web-proxies
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor HipHop Virtual Machine metrics for efficient
        PHP execution and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [HHVM Exporter](https://github.com/wikimedia/operations-software-hhvm_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [HHVM Exporter](https://github.com/wikimedia/operations-software-hhvm_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Huawei Hilink
      link: https://github.com/eliecharra/hilink-exporter
      icon_filename: Huawei-hilink.png
      categories:
        - data-collection.iot-devices
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep tabs on Huawei HiLink device metrics for optimized connectivity and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Huawei Hilink exporter](https://github.com/eliecharra/hilink-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Huawei Hilink exporter](https://github.com/eliecharra/hilink-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Hitron CGNV4
      link: https://github.com/yrro/hitron-exporter
      icon_filename: hitron.png
      categories:
        - data-collection.hardware-devices-and-sensors
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Hitron CGNV4 gateway metrics for efficient network management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Hitron CGNV4 exporter](https://github.com/yrro/hitron-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Hitron CGNV4 exporter](https://github.com/yrro/hitron-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Hitron CODA Cable Modem
      link: https://github.com/hairyhenderson/hitron_coda_exporter
      icon_filename: hitron.png
      categories:
        - data-collection.hardware-devices-and-sensors
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track Hitron CODA cable modem metrics for optimized internet connectivity and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Hitron CODA Cable Modem Exporter](https://github.com/hairyhenderson/hitron_coda_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Hitron CODA Cable Modem Exporter](https://github.com/hairyhenderson/hitron_coda_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Homebridge s
      link: https://github.com/lstrojny/homebridge-prometheus-exporter
      icon_filename: homebridge.png
      categories:
        - data-collection.iot-devices
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Homebridge smart home metrics for efficient home automation management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Homebridge Prometheus Exporter](https://github.com/lstrojny/homebridge-prometheus-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Homebridge Prometheus Exporter](https://github.com/lstrojny/homebridge-prometheus-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Lutron Homeworks
      link: https://github.com/jbarwick/homeworks-service
      icon_filename: lutron-homeworks.png
      categories:
        - data-collection.iot-devices
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep an eye on Homeworks home automation system metrics for optimized smart home management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Lutron Homeworks Exporter](https://github.com/jbarwick/homeworks-service) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Lutron Homeworks Exporter](https://github.com/jbarwick/homeworks-service) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Homey
      link: https://github.com/rickardp/homey-prometheus-exporter
      icon_filename: homey.png
      categories:
        - data-collection.iot-devices
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track Homey smart home controller metrics for efficient home automation and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Homey Exporter](https://github.com/rickardp/homey-prometheus-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Homey Exporter](https://github.com/rickardp/homey-prometheus-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: httpd
      link: https://github.com/technicalguru/httpd-exporter
      icon_filename: httpd.png
      categories:
        - data-collection.web-servers-and-web-proxies
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Apache HTTP Server metrics for optimized web server performance and management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [httpd-exporter](https://github.com/technicalguru/httpd-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [httpd-exporter](https://github.com/technicalguru/httpd-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: huawei-lte
      link: https://github.com/herbetom/huawei-lte-exporter
      icon_filename: huawei.png
      categories:
        - data-collection.networking-stack-and-network-interfaces
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track Huawei LTE modem metrics for efficient cellular connectivity and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [huawei-lte-exporter](https://github.com/herbetom/huawei-lte-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [huawei-lte-exporter](https://github.com/herbetom/huawei-lte-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: IBM Z CEX Device Plugin
      link: https://github.com/ibm-s390-cloud/k8s-cex-dev-plugin
      icon_filename: ibm-cex.png
      categories:
        - data-collection.hardware-devices-and-sensors
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track IBM Z Crypto Express device metrics for optimized cryptographic performance and management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [IBM Z CEX Device Plugin Prometheus Exporter](https://github.com/ibm-s390-cloud/k8s-cex-dev-plugin) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [IBM Z CEX Device Plugin Prometheus Exporter](https://github.com/ibm-s390-cloud/k8s-cex-dev-plugin) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: IBM Z HMC
      link: https://github.com/zhmcclient/zhmc-prometheus-exporter
      icon_filename: ibm-logo.png
      categories:
        - data-collection.hardware-devices-and-sensors
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor IBM Z Hardware Management Console metrics for efficient mainframe management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [IBM Z HMC Exporter](https://github.com/zhmcclient/zhmc-prometheus-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [IBM Z HMC Exporter](https://github.com/zhmcclient/zhmc-prometheus-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: IOTA
      link: https://github.com/crholliday/iota-prom-exporter
      icon_filename: iota.png
      categories:
        - data-collection.blockchain-servers
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep an eye on IOTA cryptocurrency network metrics for efficient blockchain performance and management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [IOTA Exporter](https://github.com/crholliday/iota-prom-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [IOTA Exporter](https://github.com/crholliday/iota-prom-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: iowatcher-ng
      link: https://github.com/sbates130272/iowatcher-ng
      icon_filename: irods.png
      categories:
        - data-collection.storage-mount-points-and-filesystems
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor iowatcher-ng disk I/O metrics for efficient storage performance and diagnostics.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [iowatcher-ng Exporter](https://github.com/sbates130272/iowatcher-ng) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [iowatcher-ng Exporter](https://github.com/sbates130272/iowatcher-ng) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: iptables
      link: https://github.com/retailnext/iptables_exporter
      icon_filename: iptables.png
      categories:
        - data-collection.linux-systems
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track iptables firewall metrics for optimized network security and management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [iptables Exporter](https://github.com/retailnext/iptables_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [iptables Exporter](https://github.com/retailnext/iptables_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: IQair
      link: https://github.com/Packetslave/iqair_exporter
      icon_filename: iqair.png
      categories:
        - data-collection.iot-devices
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor air quality data from IQAir devices for efficient environmental monitoring and analysis.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [IQair Exporter](https://github.com/Packetslave/iqair_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [IQair Exporter](https://github.com/Packetslave/iqair_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: iRODS
      link: https://github.com/lexis-project/-irods-prometheus-exporter
      icon_filename: iRods-logo.png
      categories:
        - data-collection.storage-mount-points-and-filesystems
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep tabs on iRODS (Integrated Rule-Oriented Data System) metrics for efficient data management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [iRODS Exporter](https://github.com/lexis-project/-irods-prometheus-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [iRODS Exporter](https://github.com/lexis-project/-irods-prometheus-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Jarvis Standing Desk
      link: https://github.com/hairyhenderson/jarvis_exporter/
      icon_filename: jarvis.jpg
      categories:
        - data-collection.iot-devices
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track Jarvis standing desk usage metrics for efficient workspace ergonomics and management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Jarvis Standing Desk Exporter](https://github.com/hairyhenderson/jarvis_exporter/) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Jarvis Standing Desk Exporter](https://github.com/hairyhenderson/jarvis_exporter/) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: jbod - Generic storage enclosure tool
      link: https://github.com/Gandi/jbod-rs
      icon_filename: jbod.png
      categories:
        - data-collection.storage-mount-points-and-filesystems
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor storage enclosure metrics for efficient storage device management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [jbod - Generic storage enclosure tool](https://github.com/Gandi/jbod-rs) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [jbod - Generic storage enclosure tool](https://github.com/Gandi/jbod-rs) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: JDBC
      link: https://github.com/sysco-middleware/prometheus-jdbc-exporter
      icon_filename: jdbc.png
      categories:
        - data-collection.database-servers
    keywords:
      - database
      - dbms
      - data storage
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep an eye on Java Database Connectivity (JDBC) metrics for optimized database connection and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [JDBC Exporter](https://github.com/sysco-middleware/prometheus-jdbc-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [JDBC Exporter](https://github.com/sysco-middleware/prometheus-jdbc-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: JetBrains Floating License Server Export
      link: https://github.com/mkreu/jetbrains-fls-exporter
      icon_filename: jetbrains.png
      categories:
        - data-collection.generic-data-collection
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor JetBrains floating license server metrics for efficient software licensing management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [JetBrains Floating License Server Export](https://github.com/mkreu/jetbrains-fls-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [JetBrains Floating License Server Export](https://github.com/mkreu/jetbrains-fls-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: JIRAlert
      link: https://github.com/alin-sinpalean/jiralert
      icon_filename: jira.png
      categories:
        - data-collection.notifications
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep tabs on JIRA issue tracking metrics for optimized project management and collaboration.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [JIRAlert](https://github.com/alin-sinpalean/jiralert) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [JIRAlert](https://github.com/alin-sinpalean/jiralert) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: journald
      link: https://github.com/dead-claudia/journald-exporter
      icon_filename: linux.png
      categories:
        - data-collection.linux-systems
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep an eye on systemd-journald metrics for efficient log management and analysis.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [journald-exporter](https://github.com/dead-claudia/journald-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [journald-exporter](https://github.com/dead-claudia/journald-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Kafka Burrow
      link: https://github.com/jirwin/burrow_exporter
      icon_filename: kafka.png
      categories:
        - data-collection.message-brokers
    keywords:
      - big data
      - stream processing
      - message broker
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track Kafka Burrow consumer lag metrics for efficient message queue management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Kafka Burrow exporter](https://github.com/jirwin/burrow_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Kafka Burrow exporter](https://github.com/jirwin/burrow_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Kafka Configs
      link: https://github.com/EladLeev/kafka-config-metrics
      icon_filename: kafka.png
      categories:
        - data-collection.message-brokers
    keywords:
      - big data
      - stream processing
      - message broker
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Kafka configuration metrics for optimized message queue performance and management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Kafka Configs Metrics Exporter](https://github.com/EladLeev/kafka-config-metrics) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Kafka Configs Metrics Exporter](https://github.com/EladLeev/kafka-config-metrics) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Kafka Connect
      link: https://github.com/findelabs/kafka-connect-exporter-rs
      icon_filename: kafka.png
      categories:
        - data-collection.message-brokers
    keywords:
      - big data
      - stream processing
      - message broker
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep tabs on Kafka Connect metrics for efficient data streaming and integration.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Kafka Connect exporter](https://github.com/findelabs/kafka-connect-exporter-rs) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Kafka Connect exporter](https://github.com/findelabs/kafka-connect-exporter-rs) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Kafka Consumer Group
      link: https://github.com/braedon/prometheus-kafka-consumer-group-exporter
      icon_filename: kafka.png
      categories:
        - data-collection.message-brokers
    keywords:
      - big data
      - stream processing
      - message broker
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track Kafka consumer group metrics for optimized message consumption and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Kafka Consumer Group exporter](https://github.com/braedon/prometheus-kafka-consumer-group-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Kafka Consumer Group exporter](https://github.com/braedon/prometheus-kafka-consumer-group-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Kafka topic
      link: https://github.com/ogibayashi/kafka-topic-exporter
      icon_filename: kafka.png
      categories:
        - data-collection.message-brokers
    keywords:
      - big data
      - stream processing
      - message broker
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track Kafka topic metrics for efficient message queue management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Kafka topic exporter](https://github.com/ogibayashi/kafka-topic-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Kafka topic exporter](https://github.com/ogibayashi/kafka-topic-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Kannel
      link: https://github.com/apostvav/kannel_exporter
      icon_filename: kannel.png
      categories:
        - data-collection.telephony-servers
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep tabs on Kannel SMS gateway and WAP gateway metrics for efficient mobile communication and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Kannel Exporter](https://github.com/apostvav/kannel_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Kannel Exporter](https://github.com/apostvav/kannel_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Keepalived
      link: https://github.com/gen2brain/keepalived_exporter
      icon_filename: keepalived.png
      categories:
        - data-collection.networking-stack-and-network-interfaces
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track Keepalived metrics for efficient high-availability and load balancing management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Keepalived Exporter](https://github.com/gen2brain/keepalived_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Keepalived Exporter](https://github.com/gen2brain/keepalived_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Knot
      link: https://github.com/ghedo/knot_exporter
      icon_filename: knot.png
      categories:
        - data-collection.dns-and-dhcp-servers
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Knot DNS server metrics for efficient domain name resolution and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Knot exporter](https://github.com/ghedo/knot_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Knot exporter](https://github.com/ghedo/knot_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Kubernetes Cloud Cost
      link: https://github.com/agilestacks/korral
      icon_filename: kubernetes.png
      categories:
        - data-collection.kubernetes
    keywords:
      - cloud services
      - cloud computing
      - scalability
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep an eye on Kubernetes cloud cost metrics for efficient cloud resource management and budgeting.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Kubernetes Cloud Cost Exporter](https://github.com/agilestacks/korral) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Kubernetes Cloud Cost Exporter](https://github.com/agilestacks/korral) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Kubernetes PersistentVolume Disk Usage
      link: https://github.com/joar/k8s-pv-disk-usage-exporter
      icon_filename: kubernetes.png
      categories:
        - data-collection.kubernetes
    keywords:
      - network monitoring
      - network performance
      - traffic analysis
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track Kubernetes PersistentVolume disk usage metrics for efficient storage management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Kubernetes PersistentVolume Disk Usage Exporter](https://github.com/joar/k8s-pv-disk-usage-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Kubernetes PersistentVolume Disk Usage Exporter](https://github.com/joar/k8s-pv-disk-usage-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Kubernetes Summary
      link: https://github.com/shalb-docker/kubernetes_exporter
      icon_filename: kubernetes.png
      categories:
        - data-collection.kubernetes
    keywords:
      - network monitoring
      - network performance
      - traffic analysis
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Kubernetes cluster summary metrics for comprehensive resource management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Kubernetes Summary Exporter](https://github.com/shalb-docker/kubernetes_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Kubernetes Summary Exporter](https://github.com/shalb-docker/kubernetes_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Kyototycoon
      link: https://github.com/kanga333/kyototycoon_exporter/
      icon_filename: kyoto-tycoon.png
      categories:
        - data-collection.database-servers
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep tabs on Kyoto Tycoon key-value store metrics for efficient data storage and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Kyototycoon Exporter](https://github.com/kanga333/kyototycoon_exporter/) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Kyototycoon Exporter](https://github.com/kanga333/kyototycoon_exporter/) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Lagerist Disk latency
      link: https://github.com/Svedrin/lagerist
      icon_filename: linux.png
      categories:
        - data-collection.storage-mount-points-and-filesystems
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track disk latency metrics for efficient storage performance and diagnostics.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Lagerist Disk latency exporter](https://github.com/Svedrin/lagerist) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Lagerist Disk latency exporter](https://github.com/Svedrin/lagerist) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: LDAP
      link: https://github.com/titisan/ldap_exporter
      icon_filename: ldap.png
      categories:
        - data-collection.authentication-and-authorization
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep an eye on Lightweight Directory Access Protocol (LDAP) metrics for efficient directory service management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [LDAP Exporter](https://github.com/titisan/ldap_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [LDAP Exporter](https://github.com/titisan/ldap_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: lynis
      link: https://github.com/MauveSoftware/lynis_exporter
      icon_filename: lynis.png
      categories:
        - data-collection.linux-systems
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track Lynis security auditing tool metrics for efficient system security and compliance management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [lynis_exporter](https://github.com/MauveSoftware/lynis_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [lynis_exporter](https://github.com/MauveSoftware/lynis_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Machbase
      link: https://github.com/MACHBASE/prometheus-machbase-exporter
      icon_filename: machbase.png
      categories:
        - data-collection.database-servers
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Machbase time-series database metrics for efficient data storage and query performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Machbase Exporter](https://github.com/MACHBASE/prometheus-machbase-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Machbase Exporter](https://github.com/MACHBASE/prometheus-machbase-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Maddy Mail Server t
      link: https://github.com/foxcpp/maddy
      icon_filename: maddy.png
      categories:
        - data-collection.mail-servers
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep tabs on Maddy Mail Server metrics for efficient email delivery and security management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Maddy Mail Server metrics endpoint](https://github.com/foxcpp/maddy) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Maddy Mail Server metrics endpoint](https://github.com/foxcpp/maddy) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: mail
      link: https://github.com/cherti/mailexporter
      icon_filename: mailexporter.png
      categories:
        - data-collection.mail-servers
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track mail server metrics for optimized email management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [mailexporter](https://github.com/cherti/mailexporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [mailexporter](https://github.com/cherti/mailexporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: MaxScale
      link: https://github.com/VoIPGRID/maxscale_exporter
      icon_filename: maria-maxscale.png
      categories:
        - data-collection.database-servers
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor MaxScale database proxy metrics for efficient database connection and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [MaxScale exporter](https://github.com/VoIPGRID/maxscale_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [MaxScale exporter](https://github.com/VoIPGRID/maxscale_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Meilisearch
      link: https://github.com/scottaglia/meilisearch_exporter
      icon_filename: meilisearch.png
      categories:
        - data-collection.search-engines
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track Meilisearch search engine metrics for efficient search performance and management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Meilisearch Exporter](https://github.com/scottaglia/meilisearch_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Meilisearch Exporter](https://github.com/scottaglia/meilisearch_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Memcached
      link: https://github.com/prometheus/memcached_exporter
      icon_filename: Memcached-Logo.wine.png
      categories:
        - data-collection.database-servers
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Memcached in-memory key-value store metrics for efficient caching performance and management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Memcached exporter](https://github.com/prometheus/memcached_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Memcached exporter](https://github.com/prometheus/memcached_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Meraki
      link: https://github.com/TheHolm/meraki-dashboard-promethus-exporter
      icon_filename: meraki.png
      categories:
        - data-collection.networking-stack-and-network-interfaces
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep tabs on Cisco Meraki cloud-managed networking device metrics for efficient network management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Meraki dashboard data exporter using API](https://github.com/TheHolm/meraki-dashboard-promethus-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Meraki dashboard data exporter using API](https://github.com/TheHolm/meraki-dashboard-promethus-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Mesos
      link: http://github.com/mesosphere/mesos_exporter
      icon_filename: mesos.png
      categories:
        - data-collection.provisioning-systems
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Apache Mesos cluster manager metrics for efficient resource management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Mesos exporter](http://github.com/mesosphere/mesos_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Mesos exporter](http://github.com/mesosphere/mesos_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Purpleidea Mgmt
      link: https://github.com/purpleidea/mgmt
      icon_filename: mgmtconfig.png
      categories:
        - data-collection.provisioning-systems
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep an eye on MGMT configuration management system metrics for efficient infrastructure management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [mgmt exporter](https://github.com/purpleidea/mgmt) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [mgmt exporter](https://github.com/purpleidea/mgmt) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Xiaomi Mi Flora
      link: https://github.com/xperimental/flowercare-exporter
      icon_filename: xiaomi.png
      categories:
        - data-collection.hardware-devices-and-sensors
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep tabs on MiFlora plant monitor metrics for efficient plant care and growth management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [MiFlora / Flower Care Exporter](https://github.com/xperimental/flowercare-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [MiFlora / Flower Care Exporter](https://github.com/xperimental/flowercare-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Mirth Connect
      link: https://github.com/vynca/mirth_exporter
      icon_filename: mirth-connect.png
      categories:
        - data-collection.message-brokers
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Mirth Connect healthcare integration engine metrics for efficient medical data exchange and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Mirth Connect Exporter](https://github.com/vynca/mirth_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Mirth Connect Exporter](https://github.com/vynca/mirth_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Moby Container
      link: https://github.com/infinityworks/moby-container-stats
      icon_filename: moby.png
      categories:
        - data-collection.containers-and-vms
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep an eye on Moby container metrics for efficient container management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Moby Container Exporter](https://github.com/infinityworks/moby-container-stats) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Moby Container Exporter](https://github.com/infinityworks/moby-container-stats) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: modbusrtu
      link: https://github.com/dernasherbrezon/modbusrtu_exporter
      icon_filename: modbus.png
      categories:
        - data-collection.networking-stack-and-network-interfaces
    keywords:
      - database
      - dbms
      - data storage
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track Modbus RTU protocol metrics for efficient industrial automation and control performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [modbusrtu_exporter](https://github.com/dernasherbrezon/modbusrtu_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [modbusrtu_exporter](https://github.com/dernasherbrezon/modbusrtu_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: MogileFS
      link: https://github.com/KKBOX/mogilefs-exporter
      icon_filename: mogilefs.png
      categories:
        - data-collection.storage-mount-points-and-filesystems
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor MogileFS distributed file system metrics for efficient storage management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [MogileFS Exporter](https://github.com/KKBOX/mogilefs-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [MogileFS Exporter](https://github.com/KKBOX/mogilefs-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Monerod
      link: https://github.com/ExcitableAardvark/monerod_exporter
      icon_filename: monero.png
      categories:
        - data-collection.blockchain-servers
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep tabs on Monero cryptocurrency daemon metrics for efficient blockchain performance and management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Monerod Exporter](https://github.com/ExcitableAardvark/monerod_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Monerod Exporter](https://github.com/ExcitableAardvark/monerod_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Monnit Sensors MQTT
      link: https://github.com/braxton9460/monnit-mqtt-exporter
      icon_filename: monnit.png
      categories:
        - data-collection.iot-devices
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track Monnit sensor data via MQTT for efficient IoT device monitoring and management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Monnit Sensors MQTT Exporter WIP](https://github.com/braxton9460/monnit-mqtt-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Monnit Sensors MQTT Exporter WIP](https://github.com/braxton9460/monnit-mqtt-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Moodle DB
      link: https://github.com/debugloop/moodledb_exporter
      icon_filename: moodledb.png
      categories:
        - data-collection.database-servers
    keywords:
      - database
      - dbms
      - data storage
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Moodle learning management system database metrics for efficient e-learning management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Moodle DB Exporter](https://github.com/debugloop/moodledb_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Moodle DB Exporter](https://github.com/debugloop/moodledb_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: mtail
      link: https://github.com/google/mtail
      icon_filename: mtail.png
      categories:
        - data-collection.logs-servers
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor log data metrics using mtail log data extractor and parser.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [mtail](https://github.com/google/mtail) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [mtail](https://github.com/google/mtail) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Naemon
      link: https://github.com/Griesbacher/Iapetos
      icon_filename: naemon.png
      categories:
        - data-collection.apm
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Naemon or Nagios network monitoring metrics for efficient IT infrastructure management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Naemon / Nagios Exporter](https://github.com/Griesbacher/Iapetos) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Naemon / Nagios Exporter](https://github.com/Griesbacher/Iapetos) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Nagios
      link: https://github.com/wbollock/nagios_exporter
      icon_filename: nagios.png
      categories:
        - data-collection.apm
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep tabs on Nagios network monitoring metrics for efficient
        IT infrastructure management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Nagios exporter](https://github.com/wbollock/nagios_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Nagios exporter](https://github.com/wbollock/nagios_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Nagios Livestatus
      link: https://github.com/m-lab/prometheus-nagios-exporter
      icon_filename: nagios.png
      categories:
        - data-collection.apm
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track Nagios Livestatus API metrics for efficient network monitoring and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Nagios Livestatus Exporter](https://github.com/m-lab/prometheus-nagios-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Nagios Livestatus Exporter](https://github.com/m-lab/prometheus-nagios-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Nature Remo E series
      link: https://github.com/kenfdev/remo-exporter
      icon_filename: nature-remo.png
      categories:
        - data-collection.iot-devices
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Nature Remo E series smart home device metrics for efficient home automation and energy management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Nature Remo E series Exporter](https://github.com/kenfdev/remo-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Nature Remo E series Exporter](https://github.com/kenfdev/remo-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Nebula
      link: https://github.com/immstudios/promexp
      icon_filename: nebula.png
      categories:
        - data-collection.media-streaming-servers
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep an eye on Nebula broadcast system metrics for efficient media broadcasting and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Nebula Exporter (unified exporter for broadcasters)](https://github.com/immstudios/promexp) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Nebula Exporter (unified exporter for broadcasters)](https://github.com/immstudios/promexp) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: NeonKube Service
      link: https://github.com/nforgeio/neonKUBE
      icon_filename: neonkube.png
      categories:
        - data-collection.service-discovery-registry
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track Neon CRM metrics for efficient nonprofit management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Neon Service Standard Exporter](https://github.com/nforgeio/neonKUBE) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Neon Service Standard Exporter](https://github.com/nforgeio/neonKUBE) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Netatmo
      link: https://github.com/xperimental/netatmo-exporter
      icon_filename: netatmo.png
      categories:
        - data-collection.hardware-devices-and-sensors
    keywords:
      - network monitoring
      - network performance
      - traffic analysis
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep an eye on Netatmo smart home device metrics for efficient home automation and energy management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Netatmo exporter](https://github.com/xperimental/netatmo-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Netatmo exporter](https://github.com/xperimental/netatmo-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: netflow
      link: https://github.com/paihu/netflow_exporter
      icon_filename: netflow.png
      categories:
        - data-collection.networking-stack-and-network-interfaces
    keywords:
      - network monitoring
      - network performance
      - traffic analysis
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track NetFlow network traffic metrics for efficient network monitoring and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [netflow exporter](https://github.com/paihu/netflow_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [netflow exporter](https://github.com/paihu/netflow_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Network
      link: https://github.com/Selfnet/prometheus-network-exporter
      icon_filename: network-exporter.png
      categories:
        - data-collection.networking-stack-and-network-interfaces
    keywords:
      - network monitoring
      - network performance
      - traffic analysis
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep tabs on network-related metrics for efficient network management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Network Exporter](https://github.com/Selfnet/prometheus-network-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Network Exporter](https://github.com/Selfnet/prometheus-network-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Nextcloud
      link: https://github.com/xperimental/nextcloud-exporter
      icon_filename: nextcloud.png
      categories:
        - data-collection.cloud-provider-managed
    keywords:
      - cloud services
      - cloud computing
      - scalability
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep an eye on Nextcloud cloud storage metrics for efficient file hosting and management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Nextcloud exporter](https://github.com/xperimental/nextcloud-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Nextcloud exporter](https://github.com/xperimental/nextcloud-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: nextdns
      link: https://github.com/raylas/nextdns-exporter
      icon_filename: nextdns.png
      categories:
        - data-collection.dns-and-dhcp-servers
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track NextDNS DNS resolver and security platform metrics for efficient DNS management and security.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [nextdns-exporter](https://github.com/raylas/nextdns-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [nextdns-exporter](https://github.com/raylas/nextdns-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: nfs-subdir-external-provisioner
      link: https://github.com/weibeld/nfs-subdir-external-provisioner-exporter
      icon_filename: nfs-provisioner.png
      categories:
        - data-collection.provisioning-systems
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep tabs on NFS subdir external provisioner metrics for efficient Kubernetes storage provisioning and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [nfs-subdir-external-provisioner-exporter](https://github.com/weibeld/nfs-subdir-external-provisioner-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [nfs-subdir-external-provisioner-exporter](https://github.com/weibeld/nfs-subdir-external-provisioner-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: NFSv4 server
      link: https://github.com/Gandi/prometheus-linux-nfsdv4-exporter
      icon_filename: linux.png
      categories:
        - data-collection.storage-mount-points-and-filesystems
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track NFSv4 file server metrics for efficient network file system management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [NFSv4 server exporter](https://github.com/Gandi/prometheus-linux-nfsdv4-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [NFSv4 server exporter](https://github.com/Gandi/prometheus-linux-nfsdv4-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: nftables
      link: https://github.com/Sheridan/nftables_exporter
      icon_filename: nftables.png
      categories:
        - data-collection.linux-systems
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor nftables firewall metrics for efficient network security and management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [nftables_exporter](https://github.com/Sheridan/nftables_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [nftables_exporter](https://github.com/Sheridan/nftables_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: NJmon for IBM AIX
      link: https://github.com/crooks/njmon_exporter
      icon_filename: ibm-logo.png
      categories:
        - data-collection.apm
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep an eye on NJmon system performance monitoring metrics for efficient IT infrastructure management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [NJmon](https://github.com/crooks/njmon_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [NJmon](https://github.com/crooks/njmon_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Node
      link: https://github.com/prometheus/node_exporter
      icon_filename: nodejs.png
      categories:
        - data-collection.linux-systems
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track system-level metrics for efficient server performance and management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Node exporter](https://github.com/prometheus/node_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Node exporter](https://github.com/prometheus/node_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: NRPE
      link: https://github.com/canonical/nrpe_exporter
      icon_filename: nrpelinux.png
      categories:
        - data-collection.apm
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Nagios Remote Plugin Executor (NRPE) metrics for efficient system and network monitoring.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [NRPE exporter](https://github.com/canonical/nrpe_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [NRPE exporter](https://github.com/canonical/nrpe_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: nshttpd/mikrotik
      link: https://github.com/swoga/mikrotik-exporter
      icon_filename: mikrotik.png
      categories:
        - data-collection.networking-stack-and-network-interfaces
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep tabs on MikroTik RouterOS metrics for efficient network device management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [nshttpd/mikrotik-exporter, swoga/m](https://github.com/swoga/mikrotik-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [nshttpd/mikrotik-exporter, swoga/m](https://github.com/swoga/mikrotik-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: NSX-T
      link: https://github.com/jk8s/nsxt_exporter
      icon_filename: vmware-nsx-t.png
      categories:
        - data-collection.cloud-provider-managed
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track VMware NSX-T software-defined networking metrics for efficient network virtualization and security management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [NSX-T Exporter](https://github.com/jk8s/nsxt_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [NSX-T Exporter](https://github.com/jk8s/nsxt_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: NUT
      link: https://github.com/HON95/prometheus-nut-exporter
      icon_filename: nut_ups.png
      categories:
        - data-collection.ups
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Network UPS Tools (NUT) metrics for efficient uninterruptible power supply management and monitoring.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [NUT Exporter](https://github.com/HON95/prometheus-nut-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [NUT Exporter](https://github.com/HON95/prometheus-nut-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: NVML
      link: https://github.com/oko/nvml-exporter-rs
      icon_filename: nvml.png
      categories:
        - data-collection.hardware-devices-and-sensors
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep an eye on NVIDIA Management Library (NVML) GPU metrics for efficient GPU performance and management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [NVML exporter](https://github.com/oko/nvml-exporter-rs) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [NVML exporter](https://github.com/oko/nvml-exporter-rs) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: OBS Studio
      link: https://github.com/lukegb/obs_studio_exporter
      icon_filename: obs-studio.png
      categories:
        - data-collection.media-streaming-servers
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track OBS Studio live streaming and recording software metrics for efficient video production and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [OBS Studio Exporter](https://github.com/lukegb/obs_studio_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [OBS Studio Exporter](https://github.com/lukegb/obs_studio_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: ODBC
      link: https://github.com/MACHBASE/prometheus-odbc-exporter
      icon_filename: odbc.png
      categories:
        - data-collection.database-servers
    keywords:
      - database
      - dbms
      - data storage
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep tabs on Open Database Connectivity (ODBC) metrics for efficient database connection and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [ODBC Exporter](https://github.com/MACHBASE/prometheus-odbc-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [ODBC Exporter](https://github.com/MACHBASE/prometheus-odbc-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Onionprobe
      link: https://gitlab.torproject.org/tpo/onion-services/onionprobe
      icon_filename: onion.png
      categories:
        - data-collection.networking-stack-and-network-interfaces
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track Tor network metrics for efficient anonymity network performance and management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Onionprobe](https://gitlab.torproject.org/tpo/onion-services/onionprobe) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Onionprobe](https://gitlab.torproject.org/tpo/onion-services/onionprobe) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: OpenHAB
      link: https://github.com/pdreker/openhab_exporter
      icon_filename: openhab-logo.png
      categories:
        - data-collection.hardware-devices-and-sensors
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track openHAB smart home automation system metrics for efficient home automation and energy management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [OpenHAB exporter](https://github.com/pdreker/openhab_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [OpenHAB exporter](https://github.com/pdreker/openhab_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: openrc
      link: https://git.sr.ht/~tomleb/openrc-exporter
      icon_filename: linux.png
      categories:
        - data-collection.linux-systems
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep tabs on OpenRC init system metrics for efficient system startup and service management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [openrc-exporter](https://git.sr.ht/~tomleb/openrc-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [openrc-exporter](https://git.sr.ht/~tomleb/openrc-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: OpenRCT2
      link: https://github.com/terinjokes/openrct2-prometheus-exporter
      icon_filename: openRCT2.png
      categories:
        - data-collection.gaming
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track OpenRCT2 game metrics for efficient game server management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [OpenRCT2 Prometheus Exporter](https://github.com/terinjokes/openrct2-prometheus-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [OpenRCT2 Prometheus Exporter](https://github.com/terinjokes/openrct2-prometheus-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: OpenROADM NETCONF
      link: https://github.com/utdal/openroadm_exporter
      icon_filename: openroadm.png
      categories:
        - data-collection.networking-stack-and-network-interfaces
    keywords:
      - network monitoring
      - network performance
      - traffic analysis
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor OpenROADM optical transport network metrics using the NETCONF protocol for efficient network management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [OpenROADM NETCONF Exporter WIP](https://github.com/utdal/openroadm_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [OpenROADM NETCONF Exporter WIP](https://github.com/utdal/openroadm_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: OpenWeatherMap
      link: https://github.com/Tenzer/openweathermap-exporter
      icon_filename: openweathermap.png
      categories:
        - data-collection.generic-data-collection
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track OpenWeatherMap weather data and air pollution metrics for efficient environmental monitoring and analysis.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [OpenWeatherMap Exporter [alternative with support for the Air Pollution
        API]](https://github.com/Tenzer/openweathermap-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [OpenWeatherMap Exporter [alternative with support for the Air
        Pollution API]](https://github.com/Tenzer/openweathermap-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Opflex-agent
      link: https://github.com/noironetworks/opflex/blob/master/docs/prometheus.md
      icon_filename: opflex.png
      categories:
        - data-collection.networking-stack-and-network-interfaces
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep tabs on OpFlex agent metrics for efficient software-defined networking management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Opflex-agent Exporter](https://github.com/noironetworks/opflex/blob/master/docs/prometheus.md) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Opflex-agent Exporter](https://github.com/noironetworks/opflex/blob/master/docs/prometheus.md) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Opflex-server
      link: https://github.com/noironetworks/opflex/blob/master/docs/prometheus.md
      icon_filename: opflex.png
      categories:
        - data-collection.networking-stack-and-network-interfaces
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor OpFlex server metrics for efficient software-defined networking management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Opflex-server Exporter](https://github.com/noironetworks/opflex/blob/master/docs/prometheus.md) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Opflex-server Exporter](https://github.com/noironetworks/opflex/blob/master/docs/prometheus.md) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Oracle DB
      link: https://github.com/iamseth/oracledb_exporter
      icon_filename: oracledb.png
      categories:
        - data-collection.database-servers
    keywords:
      - database
      - dbms
      - data storage
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track Oracle Database metrics for efficient database management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Oracle DB Exporter](https://github.com/iamseth/oracledb_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Oracle DB Exporter](https://github.com/iamseth/oracledb_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Osquery
      link: https://github.com/zwopir/osquery_exporter
      icon_filename: osquery.png
      categories:
        - data-collection.generic-data-collection
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep an eye on osquery system information metrics for efficient system monitoring and diagnostics.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Osquery exporter](https://github.com/zwopir/osquery_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Osquery exporter](https://github.com/zwopir/osquery_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: OTRS
      link: https://github.com/JulianDroste/otrs_exporter
      icon_filename: otrs.png
      categories:
        - data-collection.notifications
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor OTRS (Open-Source Ticket Request System) metrics for efficient helpdesk management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [OTRS Exporter](https://github.com/JulianDroste/otrs_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [OTRS Exporter](https://github.com/JulianDroste/otrs_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: ovn-kubernetes Master
      link: https://github.com/ovn-org/ovn-kubernetes
      icon_filename: kube-ovn.png
      categories:
        - data-collection.kubernetes
    keywords:
      - network monitoring
      - network performance
      - traffic analysis
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track OVN-Kubernetes master metrics for efficient Kubernetes networking management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [ovn-kubernetes Master Exporter](https://github.com/ovn-org/ovn-kubernetes) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [ovn-kubernetes Master Exporter](https://github.com/ovn-org/ovn-kubernetes) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: ovn-kubernetes Node
      link: https://github.com/ovn-org/ovn-kubernetes
      icon_filename: kube-ovn.png
      categories:
        - data-collection.kubernetes
    keywords:
      - network monitoring
      - network performance
      - traffic analysis
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor OVN-Kubernetes node metrics for efficient Kubernetes networking management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [ovn-kubernetes Node Exporter](https://github.com/ovn-org/ovn-kubernetes) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [ovn-kubernetes Node Exporter](https://github.com/ovn-org/ovn-kubernetes) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: P1 - Dutch Electricity Smart Meter
      link: https://github.com/TobiasDeBruijn/prometheus-p1-exporter
      icon_filename: dutch-electricity.png
      categories:
        - data-collection.iot-devices
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep tabs on Dutch smart meter P1 port metrics for efficient energy management and monitoring.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [P1Exporter - Dutch Electricity Smart Meter Exporter](https://github.com/TobiasDeBruijn/prometheus-p1-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [P1Exporter - Dutch Electricity Smart Meter Exporter](https://github.com/TobiasDeBruijn/prometheus-p1-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Phusion Passenger + NGINX
      link: https://github.com/stuartnelson3/passenger_exporter
      icon_filename: phusion.png
      categories:
        - data-collection.apm
    keywords:
      - web server
      - http
      - https
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track Phusion Passenger application server metrics for efficient web application management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Passenger Exporter](https://github.com/stuartnelson3/passenger_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Passenger Exporter](https://github.com/stuartnelson3/passenger_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Pathvector
      link: https://github.com/natesales/pathvector
      icon_filename: pathvector.png
      categories:
        - data-collection.networking-stack-and-network-interfaces
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Pathvector BGP routing metrics for efficient
        Border Gateway Protocol management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Pathvector](https://github.com/natesales/pathvector) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Pathvector](https://github.com/natesales/pathvector) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Patroni
      link: https://github.com/gopaytech/patroni_exporter
      icon_filename: patroni.png
      categories:
        - data-collection.database-servers
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep tabs on Patroni PostgreSQL high-availability metrics for efficient database management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Patroni Exporter](https://github.com/gopaytech/patroni_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Patroni Exporter](https://github.com/gopaytech/patroni_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: PCP
      link: https://github.com/performancecopilot/pcp/blob/main/man/man3/pmwebapi.3
      icon_filename: pcp.png
      categories:
        - data-collection.apm
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track Performance Co-Pilot system performance metrics for efficient IT infrastructure management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [PCP exporter](https://github.com/performancecopilot/pcp/blob/main/man/man3/pmwebapi.3) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [PCP exporter](https://github.com/performancecopilot/pcp/blob/main/man/man3/pmwebapi.3) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: PCSensor TEMPer
      link: https://github.com/yrro/temper-exporter
      icon_filename: pcsensor.png
      categories:
        - data-collection.hardware-devices-and-sensors
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor PCSensor TEMPer temperature sensor metrics for efficient environmental monitoring and management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [PCSensor TEMPer exporter](https://github.com/yrro/temper-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [PCSensor TEMPer exporter](https://github.com/yrro/temper-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Personal Weather Station
      link: https://github.com/JohnOrthoefer/pws-exporter
      icon_filename: wunderground.png
      categories:
        - data-collection.iot-devices
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track personal weather station metrics for efficient weather monitoring and management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Personal Weather Station Exporter](https://github.com/JohnOrthoefer/pws-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Personal Weather Station Exporter](https://github.com/JohnOrthoefer/pws-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: pgBackRest
      link: https://github.com/woblerr/pgbackrest_exporter
      icon_filename: pgbackrest.png
      categories:
        - data-collection.database-servers
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor pgBackRest PostgreSQL backup metrics for efficient database backup and management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [pgBackRest Exporter](https://github.com/woblerr/pgbackrest_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [pgBackRest Exporter](https://github.com/woblerr/pgbackrest_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: PgBouncer
      link: https://git.cbaines.net/prometheus-pgbouncer-exporter/
      icon_filename: pgbouncer.png
      categories:
        - data-collection.database-servers
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep tabs on PgBouncer PostgreSQL connection pooler metrics for efficient database connection management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [PgBouncer exporter](https://git.cbaines.net/prometheus-pgbouncer-exporter/) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [PgBouncer exporter](https://git.cbaines.net/prometheus-pgbouncer-exporter/) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Pgpool-II
      link: https://github.com/pgpool/pgpool2_exporter
      icon_filename: pgpool2.png
      categories:
        - data-collection.database-servers
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track Pgpool-II PostgreSQL middleware metrics for efficient database connection management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Pgpool-II Exporter](https://github.com/pgpool/pgpool2_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Pgpool-II Exporter](https://github.com/pgpool/pgpool2_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: 'Phabricator '
      link: https://github.com/knyar/phalerts
      icon_filename: phabricator.png
      categories:
        - data-collection.notifications
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Phabricator project management and collaboration platform metrics using Alertmanager webhook integration.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Phabricator webhook for Alertmanager](https://github.com/knyar/phalerts) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Phabricator webhook for Alertmanager](https://github.com/knyar/phalerts) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Pimoroni Enviro+
      link: https://github.com/terradolor/prometheus-enviro-exporter
      icon_filename: pimorino.png
      categories:
        - data-collection.iot-devices
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track Pimoroni Enviro+ air quality and environmental metrics for efficient environmental monitoring and analysis.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Pimoroni Enviro+ Exporter](https://github.com/terradolor/prometheus-enviro-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Pimoroni Enviro+ Exporter](https://github.com/terradolor/prometheus-enviro-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Pingdom
      link: https://github.com/veepee-oss/pingdom_exporter
      icon_filename: pingdom.png
      categories:
        - data-collection.synthetic-checks
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Pingdom website monitoring service metrics for efficient website performance management and diagnostics.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Pingdom Exporter](https://github.com/veepee-oss/pingdom_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Pingdom Exporter](https://github.com/veepee-oss/pingdom_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: poudriere
      link: https://rnd.phryk.net/phryk-evil-mad-sciences-llc/prometheus_poudriere
      icon_filename: poudriere.png
      categories:
        - data-collection.freebsd-systems
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track Poudriere FreeBSD package building and testing metrics for efficient package management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [poudriere exporter](https://rnd.phryk.net/phryk-evil-mad-sciences-llc/prometheus_poudriere) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [poudriere exporter](https://rnd.phryk.net/phryk-evil-mad-sciences-llc/prometheus_poudriere) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: PowerMax
      link: https://github.com/kckecheng/powermax_exporter
      icon_filename: powermax.png
      categories:
        - data-collection.storage-mount-points-and-filesystems
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Dell EMC PowerMax storage array metrics for efficient storage management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [PowerMax Exporter](https://github.com/kckecheng/powermax_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [PowerMax Exporter](https://github.com/kckecheng/powermax_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Powerpal
      link: https://github.com/aashley/powerpal_exporter
      icon_filename: powerpal.png
      categories:
        - data-collection.iot-devices
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep an eye on Powerpal smart meter metrics for efficient energy management and monitoring.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Powerpal Exporter](https://github.com/aashley/powerpal_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Powerpal Exporter](https://github.com/aashley/powerpal_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: ProFTPD
      link: https://github.com/transnano/proftpd_exporter
      icon_filename: proftpd.png
      categories:
        - data-collection.ftp-servers
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor ProFTPD FTP server metrics for efficient file transfer and server performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [ProFTPD Exporter](https://github.com/transnano/proftpd_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [ProFTPD Exporter](https://github.com/transnano/proftpd_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Eaton UPS
      link: https://github.com/psyinfra/prometheus-eaton-ups-exporter
      icon_filename: eaton.jpg
      categories:
        - data-collection.ups
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Eaton uninterruptible power supply (UPS) metrics for efficient power management and monitoring.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Prometheus Eaton UPS Exporter](https://github.com/psyinfra/prometheus-eaton-ups-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Prometheus Eaton UPS Exporter](https://github.com/psyinfra/prometheus-eaton-ups-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Prow
      link: https://github.com/xrstf/prow_exporter
      icon_filename: prow.png
      categories:
        - data-collection.kubernetes
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Kubernetes Prow CI/CD platform metrics for efficient build and test pipeline management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Prow Exporter](https://github.com/xrstf/prow_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Prow Exporter](https://github.com/xrstf/prow_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: py-air-control Air Quality
      link: https://github.com/urbas/py-air-control-exporter
      icon_filename: pyair.png
      categories:
        - data-collection.iot-devices
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track air quality metrics using py-air-control for efficient environmental monitoring and analysis.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [py-air-control Air Quality Exporter](https://github.com/urbas/py-air-control-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [py-air-control Air Quality Exporter](https://github.com/urbas/py-air-control-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Python RQ
      link: https://github.com/mdawar/rq-exporter
      icon_filename: rq.png
      categories:
        - data-collection.message-brokers
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Python RQ (Redis Queue) job queue metrics for efficient task management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Python RQ Exporter](https://github.com/mdawar/rq-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Python RQ Exporter](https://github.com/mdawar/rq-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: qBittorrent
      link: https://github.com/fru1tstand/qbittorrent-exporter
      icon_filename: qb.png
      categories:
        - data-collection.p2p
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep an eye on qBittorrent torrent client metrics for efficient file downloads and resource management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [qBittorrent Exporter](https://github.com/fru1tstand/qbittorrent-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [qBittorrent Exporter](https://github.com/fru1tstand/qbittorrent-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Radio Thermostat
      link: https://github.com/andrewlow/radio-thermostat-exporter
      icon_filename: radiots.png
      categories:
        - data-collection.iot-devices
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Radio Thermostat smart thermostat metrics for efficient home automation and energy management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Radio Thermostat Exporter](https://github.com/andrewlow/radio-thermostat-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Radio Thermostat Exporter](https://github.com/andrewlow/radio-thermostat-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Rancher
      link: https://github.com/infinityworksltd/prometheus-rancher-exporter
      icon_filename: rancher.png
      categories:
        - data-collection.kubernetes
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track Rancher container orchestration platform metrics for efficient container management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Rancher Exporter](https://github.com/infinityworksltd/prometheus-rancher-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Rancher Exporter](https://github.com/infinityworksltd/prometheus-rancher-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Raritan PDU
      link: https://github.com/psyinfra/prometheus-raritan-pdu-exporter
      icon_filename: raritan.png
      categories:
        - data-collection.hardware-devices-and-sensors
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Raritan Power Distribution Unit (PDU) metrics for efficient power management and monitoring.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Raritan PDU Exporter](https://github.com/psyinfra/prometheus-raritan-pdu-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Raritan PDU Exporter](https://github.com/psyinfra/prometheus-raritan-pdu-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: RCT Inverter
      link: https://github.com/svalouch/rctmon
      icon_filename: rct.png
      categories:
        - data-collection.iot-devices
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep an eye on RCT Power inverter metrics for efficient solar energy management and monitoring.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [RctMon - RCT Inverter metrics extractor](https://github.com/svalouch/rctmon) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [RctMon - RCT Inverter metrics extractor](https://github.com/svalouch/rctmon) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: RouterOS
      link: https://github.com/welbymcroberts/routeros_exporter
      icon_filename: routeros.png
      categories:
        - data-collection.networking-stack-and-network-interfaces
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track MikroTik RouterOS metrics for efficient network device management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [RouterOS exporter](https://github.com/welbymcroberts/routeros_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [RouterOS exporter](https://github.com/welbymcroberts/routeros_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: RTRTR
      link: https://github.com/NLnetLabs/rtrtr
      icon_filename: rtrtr.png
      categories:
        - data-collection.networking-stack-and-network-interfaces
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep an eye on RPKI-to-Router (RTR) protocol metrics for efficient routing security and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [rtrtr exporter](https://github.com/NLnetLabs/rtrtr) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [rtrtr exporter](https://github.com/NLnetLabs/rtrtr) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: SABnzbd
      link: https://github.com/msroest/sabnzbd_exporter
      icon_filename: sabnzbd.png
      categories:
        - data-collection.media-streaming-servers
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor SABnzbd Usenet client metrics for efficient file downloads and resource management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [SABnzbd Exporter](https://github.com/msroest/sabnzbd_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [SABnzbd Exporter](https://github.com/msroest/sabnzbd_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Salicru EQX inverter
      link: https://github.com/alejandroscf/prometheus_salicru_exporter
      icon_filename: salicru.png
      categories:
        - data-collection.iot-devices
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep tabs on Salicru EQX solar inverter metrics for efficient solar energy management and monitoring.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Salicru EQX inverter](https://github.com/alejandroscf/prometheus_salicru_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Salicru EQX inverter](https://github.com/alejandroscf/prometheus_salicru_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Script
      link: https://github.com/adhocteam/script_exporter
      icon_filename: script.png
      categories:
        - data-collection.generic-data-collection
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor custom script metrics for efficient performance tracking and management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Script Exporter](https://github.com/adhocteam/script_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Script Exporter](https://github.com/adhocteam/script_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: SCTP
      link: https://github.com/philipfoulkes/sctp_exporter
      icon_filename: sctp.png
      categories:
        - data-collection.networking-stack-and-network-interfaces
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep an eye on Stream Control Transmission Protocol (SCTP) metrics for efficient transport layer protocol performance and management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [SCTP Exporter](https://github.com/philipfoulkes/sctp_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [SCTP Exporter](https://github.com/philipfoulkes/sctp_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: sensatronics
      link: https://github.com/gerberprototyping/sensatronics_exporter
      icon_filename: sensatronics.png
      categories:
        - data-collection.hardware-devices-and-sensors
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Sensatronics environmental sensor metrics for efficient environmental monitoring and management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [sensatronics_exporter](https://github.com/gerberprototyping/sensatronics_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [sensatronics_exporter](https://github.com/gerberprototyping/sensatronics_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Sense Energy
      link: https://github.com/ejsuncy/sense_energy_prometheus_exporter
      icon_filename: sense.png
      categories:
        - data-collection.iot-devices
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep tabs on Sense Energy smart meter metrics for efficient energy management and monitoring.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Sense Energy exporter](https://github.com/ejsuncy/sense_energy_prometheus_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Sense Energy exporter](https://github.com/ejsuncy/sense_energy_prometheus_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Sensu
      link: https://github.com/reachlin/sensu_exporter
      icon_filename: sensu.png
      categories:
        - data-collection.apm
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Sensu monitoring platform metrics for efficient infrastructure monitoring and management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Sensu Exporter](https://github.com/reachlin/sensu_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Sensu Exporter](https://github.com/reachlin/sensu_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: ServerTech
      link: https://github.com/tynany/servertech_exporter
      icon_filename: servertech.png
      categories:
        - data-collection.hardware-devices-and-sensors
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep an eye on Server Technology power distribution unit (PDU) metrics for efficient power management and monitoring.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [ServerTech Exporter](https://github.com/tynany/servertech_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [ServerTech Exporter](https://github.com/tynany/servertech_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: SGX
      link: https://github.com/woju/prometheus-sgx-exporter
      icon_filename: sgx.jpg
      categories:
        - data-collection.hardware-devices-and-sensors
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track Intel Software Guard Extensions (SGX) metrics for efficient secure enclave management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [SGX exporter](https://github.com/woju/prometheus-sgx-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [SGX exporter](https://github.com/woju/prometheus-sgx-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Shelly
      link: https://github.com/aexel90/shelly_exporter
      icon_filename: shelly.jpg
      categories:
        - data-collection.iot-devices
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Shelly smart home device metrics for efficient home automation and energy management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Shelly Exporter](https://github.com/aexel90/shelly_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Shelly Exporter](https://github.com/aexel90/shelly_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Sia
      link: https://github.com/tbenz9/sia_exporter
      icon_filename: sia.png
      categories:
        - data-collection.blockchain-servers
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track Sia decentralized storage platform metrics for efficient storage management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Sia Exporter](https://github.com/tbenz9/sia_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Sia Exporter](https://github.com/tbenz9/sia_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Sidekiq
      link: https://github.com/fastly/sidekiq-prometheus
      icon_filename: sideqik.png
      categories:
        - data-collection.provisioning-systems
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Sidekiq background job processing metrics for efficient task management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Sidekiq Prometheus](https://github.com/fastly/sidekiq-prometheus) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Sidekiq Prometheus](https://github.com/fastly/sidekiq-prometheus) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Siebel
      link: https://github.com/barkadron/siebel_exporter
      icon_filename: siebel.png
      categories:
        - data-collection.apm
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep an eye on Siebel CRM (Customer Relationship Management) application metrics for efficient customer management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Siebel Exporter](https://github.com/barkadron/siebel_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Siebel Exporter](https://github.com/barkadron/siebel_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Siemens S7 PLC
      link: https://github.com/MarcusCalidus/s7-plc-exporter
      icon_filename: siemens.png
      categories:
        - data-collection.hardware-devices-and-sensors
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Siemens S7 Programmable Logic Controller (PLC) metrics for efficient industrial automation and control.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Siemens S7 PLC exporter](https://github.com/MarcusCalidus/s7-plc-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Siemens S7 PLC exporter](https://github.com/MarcusCalidus/s7-plc-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: silverpeak
      link: https://github.com/ipHeaders/silverpeak-prometheus
      icon_filename: silverpeak.png
      categories:
        - data-collection.networking-stack-and-network-interfaces
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Silver Peak SD-WAN metrics for efficient wide area network management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [silverpeak-prometheus](https://github.com/ipHeaders/silverpeak-prometheus) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [silverpeak-prometheus](https://github.com/ipHeaders/silverpeak-prometheus) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Site 24x7
      link: https://github.com/svenstaro/site24x7_exporter
      icon_filename: site247.png
      categories:
        - data-collection.synthetic-checks
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Site24x7 website and infrastructure monitoring metrics for efficient performance tracking and management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [site24x7 Exporter](https://github.com/svenstaro/site24x7_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [site24x7 Exporter](https://github.com/svenstaro/site24x7_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: SMA
      link: https://github.com/dr0ps/sma_inverter_exporter
      icon_filename: sma.png
      categories:
        - data-collection.iot-devices
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor SMA solar inverter metrics for efficient solar energy management and monitoring.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [sma-exporter](https://github.com/dr0ps/sma_inverter_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [sma-exporter](https://github.com/dr0ps/sma_inverter_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: SmartPi
      link: https://github.com/nDenerserve/SmartPi
      icon_filename: smartpi.png
      categories:
        - data-collection.hardware-devices-and-sensors
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track SmartPi smart meter metrics for efficient energy management and monitoring.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [SmartPi](https://github.com/nDenerserve/SmartPi) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [SmartPi](https://github.com/nDenerserve/SmartPi) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: smartrg808ac
      link: https://github.com/AdamIsrael/smartrg808ac_exporter
      icon_filename: smartr.jpeg
      categories:
        - data-collection.networking-stack-and-network-interfaces
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor SmartRG SR808ac router metrics for efficient network device management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [smartrg808ac_exporter](https://github.com/AdamIsrael/smartrg808ac_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [smartrg808ac_exporter](https://github.com/AdamIsrael/smartrg808ac_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: SML
      link: https://github.com/mweinelt/sml-exporter
      icon_filename: sml.png
      categories:
        - data-collection.iot-devices
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Smart Message Language (SML) metrics for efficient smart metering and energy management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [SML Exporter](https://github.com/mweinelt/sml-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [SML Exporter](https://github.com/mweinelt/sml-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: SoftEther
      link: https://github.com/dalance/softether_exporter
      icon_filename: softether.png
      categories:
        - data-collection.vpns
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor SoftEther VPN Server metrics for efficient virtual private network (VPN) management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [SoftEther Exporter](https://github.com/dalance/softether_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [SoftEther Exporter](https://github.com/dalance/softether_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Solar logging stick
      link: https://gitlab.com/bhavin192/lsx-exporter
      icon_filename: solar.png
      categories:
        - data-collection.iot-devices
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor solar energy metrics using a solar logging stick for efficient solar energy management and monitoring.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Solar logging stick exporter](https://gitlab.com/bhavin192/lsx-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Solar logging stick exporter](https://gitlab.com/bhavin192/lsx-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: SolarEdge
      link: https://github.com/dave92082/SolarEdge-Exporter
      icon_filename: solaredge.png
      categories:
        - data-collection.iot-devices
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track SolarEdge solar inverter metrics for efficient solar energy management and monitoring.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [SolarEdge Exporter](https://github.com/dave92082/SolarEdge-Exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [SolarEdge Exporter](https://github.com/dave92082/SolarEdge-Exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Solis
      link: https://github.com/candlerb/solis_exporter
      icon_filename: solis.jpg
      categories:
        - data-collection.iot-devices
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Solis solar inverter metrics for efficient solar energy management and monitoring.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Solis Exporter](https://github.com/candlerb/solis_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Solis Exporter](https://github.com/candlerb/solis_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: SONiC
      link: https://github.com/kamelnetworks/sonic_exporter
      icon_filename: sonic.jpg
      categories:
        - data-collection.networking-stack-and-network-interfaces
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep tabs on Software for Open Networking in the Cloud (SONiC) metrics for efficient network switch management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [SONiC Exporter](https://github.com/kamelnetworks/sonic_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [SONiC Exporter](https://github.com/kamelnetworks/sonic_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: IBM Spectrum Virtualize
      link: https://github.com/bluecmd/spectrum_virtualize_exporter
      icon_filename: spectrumv.png
      categories:
        - data-collection.storage-mount-points-and-filesystems
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor IBM Spectrum Virtualize metrics for efficient storage virtualization and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [spectrum_virtualize_exporter](https://github.com/bluecmd/spectrum_virtualize_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [spectrum_virtualize_exporter](https://github.com/bluecmd/spectrum_virtualize_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Speedify
      link: https://github.com/willshen/speedify_exporter
      icon_filename: speedify.png
      categories:
        - data-collection.networking-stack-and-network-interfaces
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track Speedify VPN metrics for efficient virtual private network (VPN) management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Speedify Exporter](https://github.com/willshen/speedify_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Speedify Exporter](https://github.com/willshen/speedify_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Sphinx
      link: https://github.com/foxdalas/sphinx_exporter
      icon_filename: sphinx.png
      categories:
        - data-collection.search-engines
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Sphinx search engine metrics for efficient search and indexing performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Sphinx Exporter](https://github.com/foxdalas/sphinx_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Sphinx Exporter](https://github.com/foxdalas/sphinx_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: SQL
      link: https://github.com/free/sql_exporter
      icon_filename: sql.png
      categories:
        - data-collection.database-servers
    keywords:
      - database
      - relational db
      - data querying
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Query SQL databases for efficient database performance monitoring.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [SQL Exporter](https://github.com/free/sql_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [SQL Exporter](https://github.com/free/sql_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: SRS (v5.0.67+)
      link: https://github.com/ossrs/srs
      icon_filename: srs.jpg
      categories:
        - data-collection.media-streaming-servers
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track Simple-RTMP-Server (SRS) metrics for efficient live streaming server management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [SRS (v5.0.67+)](https://github.com/ossrs/srs) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [SRS (v5.0.67+)](https://github.com/ossrs/srs) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Starwind vSAN
      link: https://github.com/evoicefire/starwind-vsan-exporter
      icon_filename: starwind.png
      categories:
        - data-collection.storage-mount-points-and-filesystems
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep tabs on StarWind Virtual SAN metrics for efficient storage virtualization and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Starwind vSAN Exporter](https://github.com/evoicefire/starwind-vsan-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Starwind vSAN Exporter](https://github.com/evoicefire/starwind-vsan-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Steam  (A2S_INFO)
      link: https://github.com/xperimental/steam-exporter
      icon_filename: steam.png
      categories:
        - data-collection.gaming
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Valve Steam game server metrics using the A2S_INFO protocol for efficient game server management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Steam Exporter (A2S_INFO)](https://github.com/xperimental/steam-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Steam Exporter (A2S_INFO)](https://github.com/xperimental/steam-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Storidge
      link: https://github.com/Storidge/cio-user-docs/blob/master/integrations/prometheus.md
      icon_filename: storidge.png
      categories:
        - data-collection.storage-mount-points-and-filesystems
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep an eye on Storidge storage metrics for efficient storage management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Storidge exporter](https://github.com/Storidge/cio-user-docs/blob/master/integrations/prometheus.md) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Storidge exporter](https://github.com/Storidge/cio-user-docs/blob/master/integrations/prometheus.md) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Stream
      link: https://github.com/carlpett/stream_exporter
      icon_filename: stream.png
      categories:
        - data-collection.media-streaming-servers
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor streaming metrics for efficient media streaming and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Stream exporter](https://github.com/carlpett/stream_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Stream exporter](https://github.com/carlpett/stream_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: strongSwan
      link: https://github.com/jlti-dev/ipsec_exporter
      icon_filename: strongswan.png
      categories:
        - data-collection.vpns
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track strongSwan VPN and IPSec metrics using the vici interface for efficient virtual private network (VPN) management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [strongSwan/IPSec/vici Exporter](https://github.com/jlti-dev/ipsec_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [strongSwan/IPSec/vici Exporter](https://github.com/jlti-dev/ipsec_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: sunnyboy
      link: https://github.com/roidelapluie/sunnyboy_exporter
      icon_filename: sunnyboy.png
      categories:
        - data-collection.iot-devices
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep tabs on SMA Sunny Boy solar inverter metrics for efficient solar energy management and monitoring.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [sunnyboy_exporter](https://github.com/roidelapluie/sunnyboy_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [sunnyboy_exporter](https://github.com/roidelapluie/sunnyboy_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Sunspec Solar Energy
      link: https://github.com/inosion/prometheus-sunspec-exporter
      icon_filename: sunspec.png
      categories:
        - data-collection.iot-devices
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor SunSpec Alliance solar energy metrics for efficient solar energy management and monitoring.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Sunspec Solar Energy Exporter](https://github.com/inosion/prometheus-sunspec-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Sunspec Solar Energy Exporter](https://github.com/inosion/prometheus-sunspec-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: supercronic
      link: https://github.com/aptible/supercronic/
      icon_filename: supercronic.png
      categories:
        - data-collection.provisioning-systems
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track Supercronic job scheduler metrics for efficient task scheduling and management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [supercronic](https://github.com/aptible/supercronic/) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [supercronic](https://github.com/aptible/supercronic/) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Surfboard
      link: https://github.com/ipstatic/surfboard_exporter
      icon_filename: surfboard.png
      categories:
        - data-collection.hardware-devices-and-sensors
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor ARRIS Surfboard modem metrics for efficient network device management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Surfboard Exporter](https://github.com/ipstatic/surfboard_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Surfboard Exporter](https://github.com/ipstatic/surfboard_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Suricata
      link: https://github.com/corelight/suricata_exporter
      icon_filename: suricata.png
      categories:
        - data-collection.security-systems
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep an eye on Suricata network intrusion detection and prevention system (IDS/IPS) metrics for efficient network security and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Suricata Exporter](https://github.com/corelight/suricata_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Suricata Exporter](https://github.com/corelight/suricata_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: SUSE Saptune
      link: https://github.com/SUSE/saptune
      icon_filename: suse.png
      categories:
        - data-collection.linux-systems
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor SUSE Linux Enterprise Server (SLES) Saptune metrics for efficient system tuning and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [SUSE Saptune exporter](https://github.com/SUSE/saptune) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [SUSE Saptune exporter](https://github.com/SUSE/saptune) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Synology ActiveBackup
      link: https://github.com/codemonauts/activebackup-prometheus-exporter
      icon_filename: synology.png
      categories:
        - data-collection.storage-mount-points-and-filesystems
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track Synology Active Backup metrics for efficient backup and data protection management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Synology ActiveBackup Exporter](https://github.com/codemonauts/activebackup-prometheus-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Synology ActiveBackup Exporter](https://github.com/codemonauts/activebackup-prometheus-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Sysload
      link: https://github.com/egmc/sysload_exporter
      icon_filename: sysload.png
      categories:
        - data-collection.apm
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor system load metrics for efficient system performance and resource management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Sysload Exporter](https://github.com/egmc/sysload_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Sysload Exporter](https://github.com/egmc/sysload_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: T-Rex NVIDIA GPU Miner
      link: https://github.com/dennisstritzke/trex_exporter
      icon_filename: trex.png
      categories:
        - data-collection.hardware-devices-and-sensors
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor T-Rex NVIDIA GPU miner metrics for efficient cryptocurrency mining and GPU performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [T-Rex NVIDIA GPU Miner Exporter](https://github.com/dennisstritzke/trex_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [T-Rex NVIDIA GPU Miner Exporter](https://github.com/dennisstritzke/trex_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: "Tado"
      link: https://github.com/eko/tado-exporter
      icon_filename: tado.png
      categories:
        - data-collection.iot-devices
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Tado smart thermostat metrics for efficient home heating and cooling management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Tado\xB0 Exporter](https://github.com/eko/tado-exporter) and parsing the response.
  setup:
    prerequisites:
      list:
        - "| Install [Tado\xB0 Exporter](https://github.com/eko/tado-exporter) by following the instructions mentioned in the exporter README.
  - <<: *module
    meta:
      <<: *meta
      most_popular: false
      community: true
      monitored_instance:
        name: "Tankerknig API"
      link: https://github.com/lukasmalkmus/tankerkoenig_exporter
      icon_filename: tanker.png
      categories:
        - data-collection.generic-data-collection
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track Tankerknig API fuel price metrics for efficient fuel price monitoring and management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Tankerknig API Exporter](https://github.com/lukasmalkmus/tankerkoenig_exporter) and parsing the response.
  setup:
    prerequisites:
      list:
        - "| Install [Tankerknig API Exporter](https://github.com/lukasmalkmus/tankerkoenig_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: teamspeak3
      link: https://gitea.lubiland.de/lub/teamspeak3_exporter
      icon_filename: teamspeak.png
      categories:
        - data-collection.telephony-servers
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Keep tabs on TeamSpeak 3 VoIP communication system metrics for efficient voice communication management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [teamspeak3_exporter](https://gitea.lubiland.de/lub/teamspeak3_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [teamspeak3_exporter](https://gitea.lubiland.de/lub/teamspeak3_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: TED5000 Energy monitor
      link: https://github.com/prg3/ted5000_exporter
      icon_filename: ted5000.png
      categories:
        - data-collection.iot-devices
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor TED5000 energy monitor metrics for efficient energy management and monitoring.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [TED5000 Energy monitor exporter](https://github.com/prg3/ted5000_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [TED5000 Energy monitor exporter](https://github.com/prg3/ted5000_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Tesla Wall Connector
      link: https://github.com/benclapp/tesla_wall_connector_exporter
      icon_filename: tesla.png
      categories:
        - data-collection.iot-devices
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Tesla Wall Connector charging station metrics for efficient electric vehicle charging management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Tesla Wall Connector Exporter](https://github.com/benclapp/tesla_wall_connector_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Tesla Wall Connector Exporter](https://github.com/benclapp/tesla_wall_connector_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Tezos Node
      link: https://gitlab.com/tezos/tezos
      icon_filename: tezos.png
      categories:
        - data-collection.blockchain-servers
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track Tezos blockchain node metrics for efficient blockchain network management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Tezos Node Exporter](https://gitlab.com/tezos/tezos) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Tezos Node Exporter](https://gitlab.com/tezos/tezos) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: ThirdAI
      link: https://github.com/ThirdAILabs/Demos
      icon_filename: thirdai.png
      categories:
        - data-collection.generic-data-collection
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor ThirdAI platform metrics for efficient management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [ThirdAI exporter](https://github.com/ThirdAILabs/Demos) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [ThirdAI exporter](https://github.com/ThirdAILabs/Demos) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Tinyproxy
      link: https://github.com/gmm42/tinyproxy_exporter
      icon_filename: tinyproxy.png
      categories:
        - data-collection.web-servers-and-web-proxies
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Tinyproxy lightweight HTTP proxy server metrics for efficient web proxy management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Tinyproxy exporter](https://github.com/gmm42/tinyproxy_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Tinyproxy exporter](https://github.com/gmm42/tinyproxy_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: TP-Link P110
      link: https://github.com/ijohanne/prometheus-tplink-p110-exporter
      icon_filename: tplink.png
      categories:
        - data-collection.iot-devices
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track TP-Link P110 smart plug metrics for efficient energy management and monitoring.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [TP-Link P110 Exporter](https://github.com/ijohanne/prometheus-tplink-p110-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [TP-Link P110 Exporter](https://github.com/ijohanne/prometheus-tplink-p110-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: TPLink EasySmart Switch
      link: https://github.com/thelastguardian/tplinkexporter
      icon_filename: tplink.png
      categories:
        - data-collection.networking-stack-and-network-interfaces
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor TPLink EasySmart network switch metrics for efficient network device management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [TPLink EasySmart Switch Exporter](https://github.com/thelastguardian/tplinkexporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [TPLink EasySmart Switch Exporter](https://github.com/thelastguardian/tplinkexporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: traceroute
      link: https://github.com/jeanfabrice/prometheus-tcptraceroute-exporter
      icon_filename: traceroute.png
      categories:
        - data-collection.networking-stack-and-network-interfaces
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Export traceroute metrics for efficient network path analysis and performance monitoring.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [traceroute exporter](https://github.com/jeanfabrice/prometheus-tcptraceroute-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [traceroute exporter](https://github.com/jeanfabrice/prometheus-tcptraceroute-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Transmission
      link: https://github.com/metalmatze/transmission-exporter
      icon_filename: transmission.png
      categories:
        - data-collection.p2p
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Transmission BitTorrent client metrics for efficient file downloads and resource management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Transmission Exporter](https://github.com/metalmatze/transmission-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Transmission Exporter](https://github.com/metalmatze/transmission-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: trickster
      link: https://github.com/trickstercache/trickster
      icon_filename: trickster.png
      categories:
        - data-collection.web-servers-and-web-proxies
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track Trickster caching reverse proxy for time-series databases metrics for efficient time-series data management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [trickster](https://github.com/trickstercache/trickster) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [trickster](https://github.com/trickstercache/trickster) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: TwinCAT ADS Web Service
      link: https://github.com/MarcusCalidus/twincat-ads-webservice-exporter
      icon_filename: twincat.png
      categories:
        - data-collection.generic-data-collection
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor TwinCAT ADS (Automation Device Specification) Web Service metrics for efficient industrial automation and control.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [TwinCAT ADS Web Service exporter](https://github.com/MarcusCalidus/twincat-ads-webservice-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [TwinCAT ADS Web Service exporter](https://github.com/MarcusCalidus/twincat-ads-webservice-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: VDO Compression and deduplication
      link: https://github.com/pcuzner/vdo_exporter
      icon_filename: redhat.png
      categories:
        - data-collection.storage-mount-points-and-filesystems
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Virtual Data Optimizer (VDO) compression and deduplication metrics for efficient storage optimization and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [VDO Compression and deduplication exporter](https://github.com/pcuzner/vdo_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [VDO Compression and deduplication exporter](https://github.com/pcuzner/vdo_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: VEEAM AHVProxy
      link: https://github.com/claranet/veeam-ahvproxy-exporter
      icon_filename: veeam.png
      categories:
        - data-collection.storage-mount-points-and-filesystems
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track Veeam Backup & Replication AHV Proxy metrics for efficient Nutanix AHV backup and recovery management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [VEEAM AHVProxy Exporter](https://github.com/claranet/veeam-ahvproxy-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [VEEAM AHVProxy Exporter](https://github.com/claranet/veeam-ahvproxy-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Vespa engine
      link: https://github.com/vespa-engine/vespa_exporter
      icon_filename: vespa.png
      categories:
        - data-collection.search-engines
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track Vespa search engine and big data processing metrics for efficient search and analytics performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Vespa engine exporter](https://github.com/vespa-engine/vespa_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Vespa engine exporter](https://github.com/vespa-engine/vespa_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Hub 3 router
      link: https://github.com/welbymcroberts/hub3_exporter
      icon_filename: hub3.png
      categories:
        - data-collection.networking-stack-and-network-interfaces
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Hub 3.0 router metrics for efficient network device management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Virgin Media/Liberty Global Hub3 Exporter](https://github.com/welbymcroberts/hub3_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Virgin Media/Liberty Global Hub3 Exporter](https://github.com/welbymcroberts/hub3_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Warp10
      link: https://github.com/centreon/warp10-sensision-exporter
      icon_filename: warp10.png
      categories:
        - data-collection.database-servers
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Warp 10 time-series database metrics for efficient time-series data management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Warp10 Exporter](https://github.com/centreon/warp10-sensision-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Warp10 Exporter](https://github.com/centreon/warp10-sensision-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Windows perflib
      link: https://github.com/leoluk/perflib_exporter
      icon_filename: windows.png
      categories:
        - data-collection.windows-systems
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track Windows performance library metrics for efficient Windows system performance and resource management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Windows perflib exporter](https://github.com/leoluk/perflib_exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Windows perflib exporter](https://github.com/leoluk/perflib_exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: ClickHouse
      link: https://github.com/ClickHouse/ClickHouse
      icon_filename: clickhouse.png
      categories:
        - data-collection.database-servers
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track ClickHouse analytics database metrics for efficient database performance and management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Yandex ClickHouse Exporter](https://github.com/ClickHouse/ClickHouse) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Yandex ClickHouse Exporter](https://github.com/ClickHouse/ClickHouse) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: YOURLS
      link: https://github.com/just1not2/prometheus-exporter-yourls
      icon_filename: yourls.png
      categories:
        - data-collection.apm
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor YOURLS (Your Own URL Shortener) metrics for efficient URL shortening service management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [YOURLS exporter](https://github.com/just1not2/prometheus-exporter-yourls) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [YOURLS exporter](https://github.com/just1not2/prometheus-exporter-yourls) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: zedhook
      link: https://github.com/mdlayher/zedhook
      icon_filename: zedhook.png
      categories:
        - data-collection.logs-servers
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor ZFS Event Daemon (ZED) metrics for efficient file system event monitoring and management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [zedhook](https://github.com/mdlayher/zedhook) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [zedhook](https://github.com/mdlayher/zedhook) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Zerto
      link: https://github.com/claranet/zerto-exporter
      icon_filename: zerto.png
      categories:
        - data-collection.cloud-provider-managed
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Zerto disaster recovery and data protection metrics for efficient backup and recovery management.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Zerto Exporter](https://github.com/claranet/zerto-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Zerto Exporter](https://github.com/claranet/zerto-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: zrepl internal
      link: https://github.com/zrepl/zrepl
      icon_filename: zrepl.png
      categories:
        - data-collection.storage-mount-points-and-filesystems
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track ZFS replication metrics using zrepl for efficient file systemreplication management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [zrepl internal exporter](https://github.com/zrepl/zrepl) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [zrepl internal exporter](https://github.com/zrepl/zrepl) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Zulip
      link: https://github.com/brokenpip3/zulip-exporter
      icon_filename: zulip.png
      categories:
        - data-collection.notifications
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Monitor Zulip open-source group chat application metrics for efficient team communication management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Zulip Exporter](https://github.com/brokenpip3/zulip-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Zulip Exporter](https://github.com/brokenpip3/zulip-exporter) by following the instructions mentioned in the exporter README.
- <<: *module
  meta:
    <<: *meta
    most_popular: false
    community: true
    monitored_instance:
      name: Zyxel GS1200
      link: https://github.com/robinelfrink/gs1200-exporter
      icon_filename: zyxel.png
      categories:
        - data-collection.networking-stack-and-network-interfaces
    keywords: []
  overview:
    <<: *overview
    data_collection:
      metrics_description: |
        Track Zyxel GS1200 network switch metrics for efficient network device management and performance.
      method_description: |
        Metrics are gathered by periodically sending HTTP requests to [Zyxel GS1200 Exporter](https://github.com/robinelfrink/gs1200-exporter) and parsing the response.
  setup:
    <<: *setup
    prerequisites:
      list:
        - title: Install OpenMetrics Exporter
          description: |
            Install [Zyxel GS1200 Exporter](https://github.com/robinelfrink/gs1200-exporter) by following the instructions mentioned in the exporter README.
