name: phpdaemon
title: phpDaemon collector
overview:
  application:
    description: "[phpDaemon](https://github.com/kakserpom/phpdaemon) is an asynchronous
      server-side framework for Web and network\napplications implemented in PHP using
      libevent.\n"
  collector:
    description: "This collector monitors metrics from one or more phpDaemon instances,
      depending on your configuration.\n"
setup:
  prerequisites:
    list:
      - title: Enable phpDaemon's HTTP server
        description: "Statistics expected to be in JSON format.\n\n<details>\n<summary>phpDaemon
          configuration</summary>\n\nInstruction from [@METAJIJI](https://github.com/METAJIJI).\n
          \nFor enable `phpd` statistics on http, you must enable the http server
          and write an application.\n\nApplication is important, because standalone\n
          application [ServerStatus.php](https://github.com/kakserpom/phpdaemon/blob/master/PHPDaemon/Applications/ServerStatus.php)\n
          provides statistics in html format and unusable for `netdata`.\n\n```php\n
          // /opt/phpdaemon/conf/phpd.conf\n\npath /opt/phpdaemon/conf/AppResolver.php;\n
          Pool:HTTPServer {\n    privileged;\n    listen '127.0.0.1';\n    port 8509;\n
          }\n```\n\n```php\n// /opt/phpdaemon/conf/AppResolver.php\n\n<?php\n\nclass
          MyAppResolver extends \\PHPDaemon\\Core\\AppResolver {\n    public function
          getRequestRoute($req, $upstream) {\n        if (preg_match('~^/(ServerStatus|FullStatus)/~',
          $req->attrs->server['DOCUMENT_URI'], $m)) {\n            return $m[1];\n\
          \        }\n    }\n}\n\nreturn new MyAppResolver;\n```\n\n```php\n/opt/phpdaemon/conf/PHPDaemon/Applications/FullStatus.php\n
          \n<?php\nnamespace PHPDaemon\\Applications;\n\nclass FullStatus extends
          \\PHPDaemon\\Core\\AppInstance {\n    public function beginRequest($req,
          $upstream) {\n        return new FullStatusRequest($this, $upstream, $req);\n\
          \    }\n}\n```\n\n```php\n// /opt/phpdaemon/conf/PHPDaemon/Applications/FullStatusRequest.php\n
          \n<?php\nnamespace PHPDaemon\\Applications;\n\nuse PHPDaemon\\Core\\Daemon;\n
          use PHPDaemon\\HTTPRequest\\Generic;\n\nclass FullStatusRequest extends
          Generic {\n    public function run() {\n        $stime = microtime(true);\n\
          \        $this->header('Content-Type: application/javascript; charset=utf-8');\n\
          \n        $stat = Daemon::getStateOfWorkers();\n        $stat['uptime']
          = time() - Daemon::$startTime;\n        echo json_encode($stat);\n    }\n\
          }\n```\n\n</details>\n"
  configuration:
    options:
      description: "The following options can be defined globally: update_every, autodetection_retry.\n"
      folding:
        title: Config options
        enabled: true
      list:
        - name: update_every
          description: Data collection frequency.
          required: false
          default_value: 1
        - name: autodetection_retry
          description: Re-check interval in seconds. Zero means not to schedule re-check.
          required: false
          default_value: 0
        - name: url
          description: Server URL.
          required: true
          default_value: http://127.0.0.1:8509/FullStatus
        - name: timeout
          description: HTTP request timeout.
          required: false
          default_value: 2
        - name: username
          description: Username for basic HTTP authentication.
          required: false
          default_value: ''
        - name: password
          description: Password for basic HTTP authentication.
          required: false
          default_value: ''
        - name: proxy_url
          description: Proxy URL.
          required: false
          default_value: ''
        - name: proxy_username
          description: Username for proxy basic HTTP authentication.
          required: false
          default_value: ''
        - name: proxy_password
          description: Password for proxy basic HTTP authentication.
          required: false
          default_value: ''
        - name: method
          description: HTTP request method.
          required: false
          default_value: GET
        - name: body
          description: HTTP request body.
          required: false
          default_value: ''
        - name: headers
          description: HTTP request headers.
          required: false
          default_value: ''
        - name: not_follow_redirects
          description: Redirect handling policy. Controls whether the client follows
            redirects.
          required: false
          default_value: no
        - name: tls_skip_verify
          description: Server certificate chain and hostname validation policy. Controls
            whether the client performs this check.
          required: false
          default_value: no
        - name: tls_ca
          description: Certification authority that the client uses when verifying
            the server's certificates.
          required: false
          default_value: ''
        - name: tls_cert
          description: Client TLS certificate.
          required: false
          default_value: ''
        - name: tls_key
          description: Client TLS key.
          required: false
          default_value: ''
    examples:
      folding:
        title: Config
        enabled: true
      list:
        - name: Basic
          description: A basic example configuration.
          config: "jobs:\n  - name: local\n    url: http://127.0.0.1:8509/FullStatus\n"
        - name: HTTP authentication
          description: HTTP authentication.
          config: "jobs:\n  - name: local\n    url: http://127.0.0.1:8509/FullStatus\n\
            \    username: username\n    password: password\n"
        - name: HTTPS with self-signed certificate
          description: HTTPS with self-signed certificate.
          config: "jobs:\n  - name: local\n    url: http://127.0.0.1:8509/FullStatus\n\
            \    tls_skip_verify: yes\n"
        - name: Multi-instance
          description: "> **Note**: When you define multiple jobs, their names must
            be unique.\n\nCollecting metrics from local and remote instances.\n"
          config: "jobs:\n  - name: local\n    url: http://127.0.0.1:8509/FullStatus\n\
            \n  - name: remote\n    url: http://192.0.2.1:8509/FullStatus\n"
    file:
      name: ''
troubleshooting:
  problems:
    list: []
metrics:
  folding:
    title: Metrics
    enabled: false
  description: ''
  availability: []
  scopes:
    - name: global
      description: These metrics refer to the entire monitored application.
      labels: []
      metrics:
        - name: phpdaemon.workers
          description: Workers
          unit: workers
          dimensions:
            - name: alive
            - name: shutdown
          chart_type: line
        - name: phpdaemon.alive_workers
          description: Alive Workers State
          unit: workers
          dimensions:
            - name: idle
            - name: busy
            - name: reloading
          chart_type: line
        - name: phpdaemon.idle_workers
          description: Idle Workers State
          unit: workers
          dimensions:
            - name: preinit
            - name: init
            - name: initialized
          chart_type: line
        - name: phpdaemon.uptime
          description: Uptime
          unit: seconds
          dimensions:
            - name: time
          chart_type: line
